
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 200) {
    for (c3, 1, 1022) {
      for (c5, 1, 1022) {
        buf_output[(c5 + int32((int64(c3)*(int64)1024)))] = (((((((buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(c3)*(int64)1024) + (int64)-1024)))] + buf_output[(c5 + int32(((int64(c3)*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(c3)*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32((int64(c3)*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32((int64(c3)*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(c3)*(int64)1024) + (int64)1024)))]) + buf_output[(c5 + int32(((int64(c3)*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(c3)*(int64)1024) + (int64)1024)))])
      }
    }
  }
}
======================step2==================================

Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 200) {
    for (c3, 1, 1022) {
      for (c5, 1, 1022) {
        buf_output[(c5 + int32((int64(c3)*(int64)1024)))] = (((((((buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(c3)*(int64)1024) + (int64)-1024)))] + buf_output[(c5 + int32(((int64(c3)*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(c3)*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32((int64(c3)*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32((int64(c3)*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(c3)*(int64)1024) + (int64)1024)))]) + buf_output[(c5 + int32(((int64(c3)*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(c3)*(int64)1024) + (int64)1024)))])
      }
    }
  }
}

Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 200) {
    for (c3, 1, 1022) {
      for (c5, 1, 1022) {
        buf_output[(c5 + int32((int64(c3)*(int64)1024)))] = (((((((buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(c3)*(int64)1024) + (int64)-1024)))] + buf_output[(c5 + int32(((int64(c3)*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(c3)*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32((int64(c3)*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32((int64(c3)*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(c3)*(int64)1024) + (int64)1024)))]) + buf_output[(c5 + int32(((int64(c3)*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(c3)*(int64)1024) + (int64)1024)))])
      }
    }
  }
}
 vars t xx yy  interchange : t & xx
-----------
Interchange L0  L1
0- for 1 <= xx < 1023 | 0
	1- for 0 <= t < 200 | 0
		2- for 1 <= yy < 1023 | 0
			conv
{ conv[t4, t5, t6] -> conv[0, t10 = 0, xx = t5, t11 = 0, t = t4, t12 = 0, yy = t6, t13 = 0] : 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 }
<illegal>
 vars t xx yy  interchange : t & yy
-----------
Interchange L0  L2
0- for 1 <= yy < 1023 | 0
	1- for 1 <= xx < 1023 | 0
		2- for 0 <= t < 200 | 0
			conv
{ conv[t4, t5, t6] -> conv[0, t15 = 0, yy = t6, t16 = 0, xx = t5, t17 = 0, t = t4, t18 = 0] : 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 }
<illegal>
 vars t xx yy  interchange : xx & yy
-----------
Interchange L1  L2
0- for 0 <= t < 200 | 0
	1- for 1 <= yy < 1023 | 0
		2- for 1 <= xx < 1023 | 0
			conv
{ conv[t4, t5, t6] -> conv[0, t19 = 0, t = t4, t20 = 0, yy = t6, t21 = 0, xx = t5, t22 = 0] : 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 }
<illegal>

original list
602.669006+
remaining list
602.669006+ vars t xx yy  Skewing : t & xx
 transformation map:{[i,j]->[2*i1*j ,1*i1*j]}
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    for (c3, max((c1 + -199), (int32(floor_f32(float32((c1/2)))) + 1)), ((min(c1, (int32(floor_f32(float32((c1/2)))) + 511)) - max((c1 + -199), (int32(floor_f32(float32((c1/2)))) + 1))) + 1)) {
      for (c5, 1, 1022) {
        buf_output[(c5 + int32((int64(((c3*2) - c1))*(int64)1024)))] = (((((((buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(((c3*2) - c1))*(int64)1024) + (int64)-1024)))] + buf_output[(c5 + int32(((int64(((c3*2) - c1))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(((c3*2) - c1))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32((int64(((c3*2) - c1))*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32((int64(((c3*2) - c1))*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(((c3*2) - c1))*(int64)1024) + (int64)1024)))]) + buf_output[(c5 + int32(((int64(((c3*2) - c1))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(((c3*2) - c1))*(int64)1024) + (int64)1024)))])
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew < 145 | 0
		2- for 1 <= yy < 1023 | 0
			conv
Evaluation : 630.403015

{ conv[t4, t5, t6] -> conv[t25 = 0, t26 = 0, t_skew_2_1 = 2t4 + t5, t28 = 0, xx_skew = t4 + t5, t30 = 0, yy = t6, t32 = 0] : 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 }


src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 vars t xx yy  Skewing : t & xx
 transformation map:{[i,j]->[3*i1*j ,2*i1*j]}
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1619) {
    for (c3, max((c1 + -199), ((c1 - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), ((min(c1, ((c1 - int32(floor_f32(float32(((c1/3) + 1))))) + 341)) - max((c1 + -199), ((c1 - int32(floor_f32(float32(((c1 + 2)/3))))) + 1))) + 1)) {
      for (c5, 1, 1022) {
        buf_output[(c5 + int32((int64(((c3*3) - (c1*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(((c3*3) - (c1*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c5 + int32(((int64(((c3*3) - (c1*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(((c3*3) - (c1*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32((int64(((c3*3) - (c1*2)))*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32((int64(((c3*3) - (c1*2)))*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(((c3*3) - (c1*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c5 + int32(((int64(((c3*3) - (c1*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(((c3*3) - (c1*2)))*(int64)1024) + (int64)1024)))])
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
0- for 0 <= t_skew_3_1 < 1619 | 0
	1- for 0 <= xx_skew < 127 | 0
		2- for 1 <= yy < 1023 | 0
			conv
Evaluation : 611.153992

{ conv[t4, t5, t6] -> conv[t46 = 0, t47 = 0, t_skew_3_1 = 3t4 + t5, t49 = 0, xx_skew = 2t4 + t5, t51 = 0, yy = t6, t53 = 0] : 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 }


src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 vars t xx yy  Skewing : t & xx
 transformation map:{[i,j]->[3*i2*j ,1*i1*j]}
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 2, 2640) {
    for (c3, max((int32(floor_f32(float32((c1/2)))) + -99), (int32(floor_f32(float32((c1/3)))) + 1)), ((min(int32(floor_f32(float32((c1/2)))), (int32(floor_f32(float32(((c1 + -1)/3)))) + 341)) - max((int32(floor_f32(float32((c1/2)))) + -99), (int32(floor_f32(float32((c1/3)))) + 1))) + 1)) {
      for (c5, 1, 1022) {
        buf_output[(c5 + int32((int64(((c3*3) - c1))*(int64)1024)))] = (((((((buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(((c3*3) - c1))*(int64)1024) + (int64)-1024)))] + buf_output[(c5 + int32(((int64(((c3*3) - c1))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(((c3*3) - c1))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32((int64(((c3*3) - c1))*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32((int64(((c3*3) - c1))*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(((c3*3) - c1))*(int64)1024) + (int64)1024)))]) + buf_output[(c5 + int32(((int64(((c3*3) - c1))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(((c3*3) - c1))*(int64)1024) + (int64)1024)))])
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
0- for 0 <= t_skew_3_2 < 2640 | 0
	1- for 0 <= xx_skew < 78 | 0
		2- for 1 <= yy < 1023 | 0
			conv
Evaluation : 629.739990

{ conv[t4, t5, t6] -> conv[t68 = 0, t69 = 0, t_skew_3_2 = 3t4 + 2t5, t71 = 0, xx_skew = t4 + t5, t73 = 0, yy = t6, t75 = 0] : 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 }


src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 vars t xx yy  Skewing : xx & yy
 transformation map:{[i,j]->[2*i1*j ,1*i1*j]}
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 200) {
    for (c3, 3, 3064) {
      for (c5, max((c3 + -1022), (int32(floor_f32(float32((c3/2)))) + 1)), (min(c3, (int32(floor_f32(float32((c3/2)))) + 512)) - max((c3 + -1022), (int32(floor_f32(float32((c3/2)))) + 1)))) {
        buf_output[(((c5*2) - c3) + int32((int64((c3 - c5))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*2) - c3)) + (int64)-1)) + int32(((int64((c3 - c5))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*2) - c3) + int32(((int64((c3 - c5))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*2) - c3)) + (int64)1)) + int32(((int64((c3 - c5))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*2) - c3)) + (int64)-1)) + int32((int64((c3 - c5))*(int64)1024)))]) + buf_output[(int32((int64(((c5*2) - c3)) + (int64)1)) + int32((int64((c3 - c5))*(int64)1024)))]) + buf_output[(int32((int64(((c5*2) - c3)) + (int64)-1)) + int32(((int64((c3 - c5))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*2) - c3) + int32(((int64((c3 - c5))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*2) - c3)) + (int64)1)) + int32(((int64((c3 - c5))*(int64)1024) + (int64)1024)))])
      }
    }
  }
}

-----------
Skewing L1 2 L2 1
0- for 0 <= t < 200 | 0
	1- for 2 <= xx_skew_2_1 < 3066 | 0
		2- for 0 <= yy_skew < 342 | 0
			conv
Evaluation : 1122.449951

{ conv[t4, t5, t6] -> conv[t90 = 0, t91 = 0, t = t4, t93 = 0, xx_skew_2_1 = 2t5 + t6, t95 = 0, yy_skew = t5 + t6, t97 = 0] : 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 }


src:0 1 0 -3 ,0 0 1 -2 ,
src:0 1 0 -2 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 2 ,0 0 1 1 ,
src:0 1 0 3 ,0 0 1 2 ,

<legal>
 vars t xx yy  Skewing : xx & yy
 transformation map:{[i,j]->[3*i1*j ,2*i1*j]}
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 200) {
    for (c3, 4, 4085) {
      for (c5, max((c3 + -1022), ((c3 - int32(floor_f32(float32(((c3 + 2)/3))))) + 1)), (min(c3, ((c3 - int32(floor_f32(float32(((c3/3) + 1))))) + 342)) - max((c3 + -1022), ((c3 - int32(floor_f32(float32(((c3 + 2)/3))))) + 1)))) {
        buf_output[(((c5*3) - (c3*2)) + int32((int64((c3 - c5))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*3) - (c3*2))) + (int64)-1)) + int32(((int64((c3 - c5))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*3) - (c3*2)) + int32(((int64((c3 - c5))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*3) - (c3*2))) + (int64)1)) + int32(((int64((c3 - c5))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*3) - (c3*2))) + (int64)-1)) + int32((int64((c3 - c5))*(int64)1024)))]) + buf_output[(int32((int64(((c5*3) - (c3*2))) + (int64)1)) + int32((int64((c3 - c5))*(int64)1024)))]) + buf_output[(int32((int64(((c5*3) - (c3*2))) + (int64)-1)) + int32(((int64((c3 - c5))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*3) - (c3*2)) + int32(((int64((c3 - c5))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*3) - (c3*2))) + (int64)1)) + int32(((int64((c3 - c5))*(int64)1024) + (int64)1024)))])
      }
    }
  }
}

-----------
Skewing L1 3 L2 1
0- for 0 <= t < 200 | 0
	1- for 3 <= xx_skew_3_1 < 4088 | 0
		2- for 0 <= yy_skew < 257 | 0
			conv
Evaluation : 1117.140015

{ conv[t4, t5, t6] -> conv[t112 = 0, t113 = 0, t = t4, t115 = 0, xx_skew_3_1 = 3t5 + t6, t117 = 0, yy_skew = 2t5 + t6, t119 = 0] : 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 }


src:0 1 0 -4 ,0 0 1 -3 ,
src:0 1 0 -3 ,0 0 1 -2 ,
src:0 1 0 -2 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 1 ,
src:0 1 0 2 ,0 0 1 1 ,
src:0 1 0 3 ,0 0 1 2 ,
src:0 1 0 4 ,0 0 1 3 ,

<legal>
 vars t xx yy  Skewing : xx & yy
 transformation map:{[i,j]->[3*i2*j ,1*i1*j]}
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 200) {
    for (c3, 5, 5106) {
      for (c5, max((int32(floor_f32(float32(((c3 + 1)/2)))) + -511), (int32(floor_f32(float32((c3/3)))) + 1)), (min(int32(floor_f32(float32(((c3 + 1)/2)))), (int32(floor_f32(float32(((c3 + -1)/3)))) + 342)) - max((int32(floor_f32(float32(((c3 + 1)/2)))) + -511), (int32(floor_f32(float32((c3/3)))) + 1)))) {
        buf_output[(((c5*3) - c3) + int32((int64((c3 - (c5*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*3) - c3)) + (int64)-1)) + int32(((int64((c3 - (c5*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*3) - c3) + int32(((int64((c3 - (c5*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*3) - c3)) + (int64)1)) + int32(((int64((c3 - (c5*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*3) - c3)) + (int64)-1)) + int32((int64((c3 - (c5*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*3) - c3)) + (int64)1)) + int32((int64((c3 - (c5*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*3) - c3)) + (int64)-1)) + int32(((int64((c3 - (c5*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*3) - c3) + int32(((int64((c3 - (c5*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*3) - c3)) + (int64)1)) + int32(((int64((c3 - (c5*2)))*(int64)1024) + (int64)1024)))])
      }
    }
  }
}

-----------
Skewing L1 3 L2 2
0- for 0 <= t < 200 | 0
	1- for 3 <= xx_skew_3_2 < 5109 | 0
		2- for 0 <= yy_skew < 206 | 0
			conv
Evaluation : 1252.130005

{ conv[t4, t5, t6] -> conv[t134 = 0, t135 = 0, t = t4, t137 = 0, xx_skew_3_2 = 3t5 + 2t6, t139 = 0, yy_skew = t5 + t6, t141 = 0] : 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 }


src:0 1 0 -5 ,0 0 1 -2 ,
src:0 1 0 -3 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -2 ,0 0 1 -1 ,
src:0 1 0 2 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 3 ,0 0 1 1 ,
src:0 1 0 5 ,0 0 1 2 ,

<legal>
 vars t xx yy  Skewing : xx & yy
 transformation map:{[i,j]->[1*i1*j ,0*i1*j]}
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 200) {
    for (c3, 2, 2043) {
      for (c5, max((c3 + -1022), 1), (min(c3, 1023) - max((c3 + -1022), 1))) {
        buf_output[(c5 + int32((int64((c3 - c5))*(int64)1024)))] = (((((((buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64((c3 - c5))*(int64)1024) + (int64)-1024)))] + buf_output[(c5 + int32(((int64((c3 - c5))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64((c3 - c5))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32((int64((c3 - c5))*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32((int64((c3 - c5))*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64((c3 - c5))*(int64)1024) + (int64)1024)))]) + buf_output[(c5 + int32(((int64((c3 - c5))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64((c3 - c5))*(int64)1024) + (int64)1024)))])
      }
    }
  }
}

-----------
Skewing L1 1 L2 1
0- for 0 <= t < 200 | 0
	1- for 1 <= xx_skew_1_1 < 2044 | 0
		2- for 0 <= yy_skew < 512 | 0
			conv
Evaluation : 1034.359985

{ conv[t4, t5, t6] -> conv[t165 = 0, t166 = 0, t = t4, t168 = 0, xx_skew_1_1 = t5 + t6, t170 = 0, yy_skew_R = -t6, t172 = 0] : 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 }


src:0 1 0 -2 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 2 ,0 0 1 1 ,

<legal>

original list
630.403015+611.153992+629.739990+1122.449951+1117.140015+1252.130005+1034.359985+602.669006+
remaining list
602.669006+611.153992+629.739990+630.403015+ Tiling 2 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 32 L1 32
0- for 0 <= t_outer < 6 | 0
	1- for 0 <= xx_outer < 31 | 0
		2- for 0 <= t_inner < 32 | 0
			3- for 0 <= xx_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t200 = 0, t_outer, t202 = 0, xx_outer, t204 = 0, t_inner, t197 = 0, xx_inner, t206 = 0, yy = t6, t208 = 0] : (t5 - xx_inner) mod 32 = 0 and (t4 - t_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 <= 32t_outer <= t4 and -31 + t5 <= 32xx_outer <= t5 and 0 <= t_inner <= 31 and 0 <= xx_inner <= 31 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 32 L1 32 L2 32
0- for 0 <= t_outer < 6 | 0
	1- for 0 <= xx_outer < 31 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_inner < 32 | 0
				4- for 0 <= xx_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t240 = 0, t_outer, t242 = 0, xx_outer, t244 = 0, yy_outer, t246 = 0, t_inner, t248 = 0, xx_inner, t237 = 0, yy_inner, t250 = 0] : (t5 - xx_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 <= 32t_outer <= t4 and -31 + t5 <= 32xx_outer <= t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_inner <= 31 and 0 <= xx_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 32 L1 32 L2 64
0- for 0 <= t_outer < 6 | 0
	1- for 0 <= xx_outer < 31 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_inner < 32 | 0
				4- for 0 <= xx_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t280 = 0, t_outer, t282 = 0, xx_outer, t284 = 0, yy_outer, t286 = 0, t_inner, t288 = 0, xx_inner, t277 = 0, yy_inner, t290 = 0] : (t5 - xx_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 <= 32t_outer <= t4 and -31 + t5 <= 32xx_outer <= t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_inner <= 31 and 0 <= xx_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 32 L1 32 L2 128
0- for 0 <= t_outer < 6 | 0
	1- for 0 <= xx_outer < 31 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_inner < 32 | 0
				4- for 0 <= xx_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t319 = 0, t_outer, t321 = 0, xx_outer, t323 = 0, yy_outer, t325 = 0, t_inner, t327 = 0, xx_inner, t316 = 0, yy_inner, t329 = 0] : (t5 - xx_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 <= 32t_outer <= t4 and -31 + t5 <= 32xx_outer <= t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_inner <= 31 and 0 <= xx_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 32 L1 64
0- for 0 <= t_outer < 6 | 0
	1- for 0 <= xx_outer < 15 | 0
		2- for 0 <= t_inner < 32 | 0
			3- for 0 <= xx_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t345 = 0, t_outer, t347 = 0, xx_outer, t349 = 0, t_inner, t342 = 0, xx_inner, t351 = 0, yy = t6, t353 = 0] : (t5 - xx_inner) mod 64 = 0 and (t4 - t_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 <= 32t_outer <= t4 and -63 + t5 <= 64xx_outer <= t5 and 0 <= t_inner <= 31 and 0 <= xx_inner <= 63 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 32 L1 64 L2 32
0- for 0 <= t_outer < 6 | 0
	1- for 0 <= xx_outer < 15 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_inner < 32 | 0
				4- for 0 <= xx_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t382 = 0, t_outer, t384 = 0, xx_outer, t386 = 0, yy_outer, t388 = 0, t_inner, t390 = 0, xx_inner, t379 = 0, yy_inner, t392 = 0] : (t5 - xx_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 <= 32t_outer <= t4 and -63 + t5 <= 64xx_outer <= t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_inner <= 31 and 0 <= xx_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 32 L1 64 L2 64
0- for 0 <= t_outer < 6 | 0
	1- for 0 <= xx_outer < 15 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_inner < 32 | 0
				4- for 0 <= xx_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t422 = 0, t_outer, t424 = 0, xx_outer, t426 = 0, yy_outer, t428 = 0, t_inner, t430 = 0, xx_inner, t419 = 0, yy_inner, t432 = 0] : (t5 - xx_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 <= 32t_outer <= t4 and -63 + t5 <= 64xx_outer <= t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_inner <= 31 and 0 <= xx_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 32 L1 64 L2 128
0- for 0 <= t_outer < 6 | 0
	1- for 0 <= xx_outer < 15 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_inner < 32 | 0
				4- for 0 <= xx_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t461 = 0, t_outer, t463 = 0, xx_outer, t465 = 0, yy_outer, t467 = 0, t_inner, t469 = 0, xx_inner, t458 = 0, yy_inner, t471 = 0] : (t5 - xx_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 <= 32t_outer <= t4 and -63 + t5 <= 64xx_outer <= t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_inner <= 31 and 0 <= xx_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 32 L1 128
0- for 0 <= t_outer < 6 | 0
	1- for 0 <= xx_outer < 7 | 0
		2- for 0 <= t_inner < 32 | 0
			3- for 0 <= xx_inner < 128 | 0
				4- for 1 <= yy < 1023 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t487 = 0, t_outer, t489 = 0, xx_outer, t491 = 0, t_inner, t484 = 0, xx_inner, t493 = 0, yy = t6, t495 = 0] : (t5 - xx_inner) mod 128 = 0 and (t4 - t_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 <= 32t_outer <= t4 and -127 + t5 <= 128xx_outer <= t5 and 0 <= t_inner <= 31 and 0 <= xx_inner <= 127 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 32 L1 128 L2 32
0- for 0 <= t_outer < 6 | 0
	1- for 0 <= xx_outer < 7 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_inner < 32 | 0
				4- for 0 <= xx_inner < 128 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t524 = 0, t_outer, t526 = 0, xx_outer, t528 = 0, yy_outer, t530 = 0, t_inner, t532 = 0, xx_inner, t521 = 0, yy_inner, t534 = 0] : (t5 - xx_inner) mod 128 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 <= 32t_outer <= t4 and -127 + t5 <= 128xx_outer <= t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_inner <= 31 and 0 <= xx_inner <= 127 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 32 L1 128 L2 64
0- for 0 <= t_outer < 6 | 0
	1- for 0 <= xx_outer < 7 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_inner < 32 | 0
				4- for 0 <= xx_inner < 128 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t564 = 0, t_outer, t566 = 0, xx_outer, t568 = 0, yy_outer, t570 = 0, t_inner, t572 = 0, xx_inner, t561 = 0, yy_inner, t574 = 0] : (t5 - xx_inner) mod 128 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 <= 32t_outer <= t4 and -127 + t5 <= 128xx_outer <= t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_inner <= 31 and 0 <= xx_inner <= 127 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 32 L1 128 L2 128
0- for 0 <= t_outer < 6 | 0
	1- for 0 <= xx_outer < 7 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_inner < 32 | 0
				4- for 0 <= xx_inner < 128 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t603 = 0, t_outer, t605 = 0, xx_outer, t607 = 0, yy_outer, t609 = 0, t_inner, t611 = 0, xx_inner, t600 = 0, yy_inner, t613 = 0] : (t5 - xx_inner) mod 128 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 <= 32t_outer <= t4 and -127 + t5 <= 128xx_outer <= t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_inner <= 31 and 0 <= xx_inner <= 127 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 64 L1 32
0- for 0 <= t_outer < 3 | 0
	1- for 0 <= xx_outer < 31 | 0
		2- for 0 <= t_inner < 64 | 0
			3- for 0 <= xx_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t629 = 0, t_outer, t631 = 0, xx_outer, t633 = 0, t_inner, t626 = 0, xx_inner, t635 = 0, yy = t6, t637 = 0] : (t5 - xx_inner) mod 32 = 0 and (t4 - t_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 <= 64t_outer <= t4 and -31 + t5 <= 32xx_outer <= t5 and 0 <= t_inner <= 63 and 0 <= xx_inner <= 31 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 64 L1 32 L2 32
0- for 0 <= t_outer < 3 | 0
	1- for 0 <= xx_outer < 31 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_inner < 64 | 0
				4- for 0 <= xx_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t666 = 0, t_outer, t668 = 0, xx_outer, t670 = 0, yy_outer, t672 = 0, t_inner, t674 = 0, xx_inner, t663 = 0, yy_inner, t676 = 0] : (t5 - xx_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 <= 64t_outer <= t4 and -31 + t5 <= 32xx_outer <= t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_inner <= 63 and 0 <= xx_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 64 L1 32 L2 64
0- for 0 <= t_outer < 3 | 0
	1- for 0 <= xx_outer < 31 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_inner < 64 | 0
				4- for 0 <= xx_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t706 = 0, t_outer, t708 = 0, xx_outer, t710 = 0, yy_outer, t712 = 0, t_inner, t714 = 0, xx_inner, t703 = 0, yy_inner, t716 = 0] : (t5 - xx_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 <= 64t_outer <= t4 and -31 + t5 <= 32xx_outer <= t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_inner <= 63 and 0 <= xx_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 64 L1 32 L2 128
0- for 0 <= t_outer < 3 | 0
	1- for 0 <= xx_outer < 31 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_inner < 64 | 0
				4- for 0 <= xx_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t745 = 0, t_outer, t747 = 0, xx_outer, t749 = 0, yy_outer, t751 = 0, t_inner, t753 = 0, xx_inner, t742 = 0, yy_inner, t755 = 0] : (t5 - xx_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 <= 64t_outer <= t4 and -31 + t5 <= 32xx_outer <= t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_inner <= 63 and 0 <= xx_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 64 L1 64
0- for 0 <= t_outer < 3 | 0
	1- for 0 <= xx_outer < 15 | 0
		2- for 0 <= t_inner < 64 | 0
			3- for 0 <= xx_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t771 = 0, t_outer, t773 = 0, xx_outer, t775 = 0, t_inner, t768 = 0, xx_inner, t777 = 0, yy = t6, t779 = 0] : (t5 - xx_inner) mod 64 = 0 and (t4 - t_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 <= 64t_outer <= t4 and -63 + t5 <= 64xx_outer <= t5 and 0 <= t_inner <= 63 and 0 <= xx_inner <= 63 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 64 L1 64 L2 32
0- for 0 <= t_outer < 3 | 0
	1- for 0 <= xx_outer < 15 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_inner < 64 | 0
				4- for 0 <= xx_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t808 = 0, t_outer, t810 = 0, xx_outer, t812 = 0, yy_outer, t814 = 0, t_inner, t816 = 0, xx_inner, t805 = 0, yy_inner, t818 = 0] : (t5 - xx_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 <= 64t_outer <= t4 and -63 + t5 <= 64xx_outer <= t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_inner <= 63 and 0 <= xx_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 64 L1 64 L2 64
0- for 0 <= t_outer < 3 | 0
	1- for 0 <= xx_outer < 15 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_inner < 64 | 0
				4- for 0 <= xx_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t848 = 0, t_outer, t850 = 0, xx_outer, t852 = 0, yy_outer, t854 = 0, t_inner, t856 = 0, xx_inner, t845 = 0, yy_inner, t858 = 0] : (t5 - xx_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 <= 64t_outer <= t4 and -63 + t5 <= 64xx_outer <= t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_inner <= 63 and 0 <= xx_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 64 L1 64 L2 128
0- for 0 <= t_outer < 3 | 0
	1- for 0 <= xx_outer < 15 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_inner < 64 | 0
				4- for 0 <= xx_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t887 = 0, t_outer, t889 = 0, xx_outer, t891 = 0, yy_outer, t893 = 0, t_inner, t895 = 0, xx_inner, t884 = 0, yy_inner, t897 = 0] : (t5 - xx_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 <= 64t_outer <= t4 and -63 + t5 <= 64xx_outer <= t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_inner <= 63 and 0 <= xx_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 64 L1 128
0- for 0 <= t_outer < 3 | 0
	1- for 0 <= xx_outer < 7 | 0
		2- for 0 <= t_inner < 64 | 0
			3- for 0 <= xx_inner < 128 | 0
				4- for 1 <= yy < 1023 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t913 = 0, t_outer, t915 = 0, xx_outer, t917 = 0, t_inner, t910 = 0, xx_inner, t919 = 0, yy = t6, t921 = 0] : (t5 - xx_inner) mod 128 = 0 and (t4 - t_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 <= 64t_outer <= t4 and -127 + t5 <= 128xx_outer <= t5 and 0 <= t_inner <= 63 and 0 <= xx_inner <= 127 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 64 L1 128 L2 32
0- for 0 <= t_outer < 3 | 0
	1- for 0 <= xx_outer < 7 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_inner < 64 | 0
				4- for 0 <= xx_inner < 128 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t950 = 0, t_outer, t952 = 0, xx_outer, t954 = 0, yy_outer, t956 = 0, t_inner, t958 = 0, xx_inner, t947 = 0, yy_inner, t960 = 0] : (t5 - xx_inner) mod 128 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 <= 64t_outer <= t4 and -127 + t5 <= 128xx_outer <= t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_inner <= 63 and 0 <= xx_inner <= 127 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 64 L1 128 L2 64
0- for 0 <= t_outer < 3 | 0
	1- for 0 <= xx_outer < 7 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_inner < 64 | 0
				4- for 0 <= xx_inner < 128 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t990 = 0, t_outer, t992 = 0, xx_outer, t994 = 0, yy_outer, t996 = 0, t_inner, t998 = 0, xx_inner, t987 = 0, yy_inner, t1000 = 0] : (t5 - xx_inner) mod 128 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 <= 64t_outer <= t4 and -127 + t5 <= 128xx_outer <= t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_inner <= 63 and 0 <= xx_inner <= 127 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 64 L1 128 L2 128
0- for 0 <= t_outer < 3 | 0
	1- for 0 <= xx_outer < 7 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_inner < 64 | 0
				4- for 0 <= xx_inner < 128 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t1029 = 0, t_outer, t1031 = 0, xx_outer, t1033 = 0, yy_outer, t1035 = 0, t_inner, t1037 = 0, xx_inner, t1026 = 0, yy_inner, t1039 = 0] : (t5 - xx_inner) mod 128 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 <= 64t_outer <= t4 and -127 + t5 <= 128xx_outer <= t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_inner <= 63 and 0 <= xx_inner <= 127 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 128 L1 32
0- for 0 <= t_outer < 1 | 0
	1- for 0 <= xx_outer < 31 | 0
		2- for 0 <= t_inner < 128 | 0
			3- for 0 <= xx_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t1055 = 0, t_outer, t1057 = 0, xx_outer, t1059 = 0, t_inner, t1052 = 0, xx_inner, t1061 = 0, yy = t6, t1063 = 0] : (t5 - xx_inner) mod 32 = 0 and (t4 - t_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 <= 128t_outer <= t4 and -31 + t5 <= 32xx_outer <= t5 and 0 <= t_inner <= 127 and 0 <= xx_inner <= 31 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 128 L1 32 L2 32
0- for 0 <= t_outer < 1 | 0
	1- for 0 <= xx_outer < 31 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_inner < 128 | 0
				4- for 0 <= xx_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t1092 = 0, t_outer, t1094 = 0, xx_outer, t1096 = 0, yy_outer, t1098 = 0, t_inner, t1100 = 0, xx_inner, t1089 = 0, yy_inner, t1102 = 0] : (t5 - xx_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 <= 128t_outer <= t4 and -31 + t5 <= 32xx_outer <= t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_inner <= 127 and 0 <= xx_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 128 L1 32 L2 64
0- for 0 <= t_outer < 1 | 0
	1- for 0 <= xx_outer < 31 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_inner < 128 | 0
				4- for 0 <= xx_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t1132 = 0, t_outer, t1134 = 0, xx_outer, t1136 = 0, yy_outer, t1138 = 0, t_inner, t1140 = 0, xx_inner, t1129 = 0, yy_inner, t1142 = 0] : (t5 - xx_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 <= 128t_outer <= t4 and -31 + t5 <= 32xx_outer <= t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_inner <= 127 and 0 <= xx_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 128 L1 32 L2 128
0- for 0 <= t_outer < 1 | 0
	1- for 0 <= xx_outer < 31 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_inner < 128 | 0
				4- for 0 <= xx_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t1171 = 0, t_outer, t1173 = 0, xx_outer, t1175 = 0, yy_outer, t1177 = 0, t_inner, t1179 = 0, xx_inner, t1168 = 0, yy_inner, t1181 = 0] : (t5 - xx_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 <= 128t_outer <= t4 and -31 + t5 <= 32xx_outer <= t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_inner <= 127 and 0 <= xx_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 128 L1 64
0- for 0 <= t_outer < 1 | 0
	1- for 0 <= xx_outer < 15 | 0
		2- for 0 <= t_inner < 128 | 0
			3- for 0 <= xx_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t1197 = 0, t_outer, t1199 = 0, xx_outer, t1201 = 0, t_inner, t1194 = 0, xx_inner, t1203 = 0, yy = t6, t1205 = 0] : (t5 - xx_inner) mod 64 = 0 and (t4 - t_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 <= 128t_outer <= t4 and -63 + t5 <= 64xx_outer <= t5 and 0 <= t_inner <= 127 and 0 <= xx_inner <= 63 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 128 L1 64 L2 32
0- for 0 <= t_outer < 1 | 0
	1- for 0 <= xx_outer < 15 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_inner < 128 | 0
				4- for 0 <= xx_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t1234 = 0, t_outer, t1236 = 0, xx_outer, t1238 = 0, yy_outer, t1240 = 0, t_inner, t1242 = 0, xx_inner, t1231 = 0, yy_inner, t1244 = 0] : (t5 - xx_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 <= 128t_outer <= t4 and -63 + t5 <= 64xx_outer <= t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_inner <= 127 and 0 <= xx_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 128 L1 64 L2 64
0- for 0 <= t_outer < 1 | 0
	1- for 0 <= xx_outer < 15 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_inner < 128 | 0
				4- for 0 <= xx_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t1274 = 0, t_outer, t1276 = 0, xx_outer, t1278 = 0, yy_outer, t1280 = 0, t_inner, t1282 = 0, xx_inner, t1271 = 0, yy_inner, t1284 = 0] : (t5 - xx_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 <= 128t_outer <= t4 and -63 + t5 <= 64xx_outer <= t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_inner <= 127 and 0 <= xx_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 128 L1 64 L2 128
0- for 0 <= t_outer < 1 | 0
	1- for 0 <= xx_outer < 15 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_inner < 128 | 0
				4- for 0 <= xx_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t1313 = 0, t_outer, t1315 = 0, xx_outer, t1317 = 0, yy_outer, t1319 = 0, t_inner, t1321 = 0, xx_inner, t1310 = 0, yy_inner, t1323 = 0] : (t5 - xx_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 <= 128t_outer <= t4 and -63 + t5 <= 64xx_outer <= t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_inner <= 127 and 0 <= xx_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 128 L1 128
0- for 0 <= t_outer < 1 | 0
	1- for 0 <= xx_outer < 7 | 0
		2- for 0 <= t_inner < 128 | 0
			3- for 0 <= xx_inner < 128 | 0
				4- for 1 <= yy < 1023 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t1339 = 0, t_outer, t1341 = 0, xx_outer, t1343 = 0, t_inner, t1336 = 0, xx_inner, t1345 = 0, yy = t6, t1347 = 0] : (t5 - xx_inner) mod 128 = 0 and (t4 - t_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 <= 128t_outer <= t4 and -127 + t5 <= 128xx_outer <= t5 and 0 <= t_inner <= 127 and 0 <= xx_inner <= 127 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 128 L1 128 L2 32
0- for 0 <= t_outer < 1 | 0
	1- for 0 <= xx_outer < 7 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_inner < 128 | 0
				4- for 0 <= xx_inner < 128 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t1376 = 0, t_outer, t1378 = 0, xx_outer, t1380 = 0, yy_outer, t1382 = 0, t_inner, t1384 = 0, xx_inner, t1373 = 0, yy_inner, t1386 = 0] : (t5 - xx_inner) mod 128 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 <= 128t_outer <= t4 and -127 + t5 <= 128xx_outer <= t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_inner <= 127 and 0 <= xx_inner <= 127 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 128 L1 128 L2 64
0- for 0 <= t_outer < 1 | 0
	1- for 0 <= xx_outer < 7 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_inner < 128 | 0
				4- for 0 <= xx_inner < 128 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t1416 = 0, t_outer, t1418 = 0, xx_outer, t1420 = 0, yy_outer, t1422 = 0, t_inner, t1424 = 0, xx_inner, t1413 = 0, yy_inner, t1426 = 0] : (t5 - xx_inner) mod 128 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 <= 128t_outer <= t4 and -127 + t5 <= 128xx_outer <= t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_inner <= 127 and 0 <= xx_inner <= 127 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t xx yy  deapth of outer is:0 test : t & xx
-----------
Tiling L0 128 L1 128 L2 128
0- for 0 <= t_outer < 1 | 0
	1- for 0 <= xx_outer < 7 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_inner < 128 | 0
				4- for 0 <= xx_inner < 128 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t1455 = 0, t_outer, t1457 = 0, xx_outer, t1459 = 0, yy_outer, t1461 = 0, t_inner, t1463 = 0, xx_inner, t1452 = 0, yy_inner, t1465 = 0] : (t5 - xx_inner) mod 128 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 <= 128t_outer <= t4 and -127 + t5 <= 128xx_outer <= t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_inner <= 127 and 0 <= xx_inner <= 127 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t xx yy  deapth of outer is:1 test : xx & yy
-----------
Tiling L1 32 L2 32
0- for 0 <= t < 200 | 0
	1- for 0 <= xx_outer < 31 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= xx_inner < 32 | 0
				4- for 0 <= yy_inner < 32 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t1481 = 0, t = t4, t1483 = 0, xx_outer, t1485 = 0, yy_outer, t1487 = 0, xx_inner, t1478 = 0, yy_inner, t1489 = 0] : (t5 - xx_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t5 <= 32xx_outer <= t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= xx_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
 Tiling 2 loop names: t xx yy  deapth of outer is:1 test : xx & yy
-----------
Tiling L1 32 L2 64
0- for 0 <= t < 200 | 0
	1- for 0 <= xx_outer < 31 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= xx_inner < 32 | 0
				4- for 0 <= yy_inner < 64 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t1505 = 0, t = t4, t1507 = 0, xx_outer, t1509 = 0, yy_outer, t1511 = 0, xx_inner, t1502 = 0, yy_inner, t1513 = 0] : (t5 - xx_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t5 <= 32xx_outer <= t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= xx_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
 Tiling 2 loop names: t xx yy  deapth of outer is:1 test : xx & yy
-----------
Tiling L1 32 L2 128
0- for 0 <= t < 200 | 0
	1- for 0 <= xx_outer < 31 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= xx_inner < 32 | 0
				4- for 0 <= yy_inner < 128 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t1529 = 0, t = t4, t1531 = 0, xx_outer, t1533 = 0, yy_outer, t1535 = 0, xx_inner, t1526 = 0, yy_inner, t1537 = 0] : (t5 - xx_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t5 <= 32xx_outer <= t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= xx_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t xx yy  deapth of outer is:1 test : xx & yy
-----------
Tiling L1 64 L2 32
0- for 0 <= t < 200 | 0
	1- for 0 <= xx_outer < 15 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= xx_inner < 64 | 0
				4- for 0 <= yy_inner < 32 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t1553 = 0, t = t4, t1555 = 0, xx_outer, t1557 = 0, yy_outer, t1559 = 0, xx_inner, t1550 = 0, yy_inner, t1561 = 0] : (t5 - xx_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t5 <= 64xx_outer <= t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= xx_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
 Tiling 2 loop names: t xx yy  deapth of outer is:1 test : xx & yy
-----------
Tiling L1 64 L2 64
0- for 0 <= t < 200 | 0
	1- for 0 <= xx_outer < 15 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= xx_inner < 64 | 0
				4- for 0 <= yy_inner < 64 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t1577 = 0, t = t4, t1579 = 0, xx_outer, t1581 = 0, yy_outer, t1583 = 0, xx_inner, t1574 = 0, yy_inner, t1585 = 0] : (t5 - xx_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t5 <= 64xx_outer <= t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= xx_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
 Tiling 2 loop names: t xx yy  deapth of outer is:1 test : xx & yy
-----------
Tiling L1 64 L2 128
0- for 0 <= t < 200 | 0
	1- for 0 <= xx_outer < 15 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= xx_inner < 64 | 0
				4- for 0 <= yy_inner < 128 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t1601 = 0, t = t4, t1603 = 0, xx_outer, t1605 = 0, yy_outer, t1607 = 0, xx_inner, t1598 = 0, yy_inner, t1609 = 0] : (t5 - xx_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t5 <= 64xx_outer <= t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= xx_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t xx yy  deapth of outer is:1 test : xx & yy
-----------
Tiling L1 128 L2 32
0- for 0 <= t < 200 | 0
	1- for 0 <= xx_outer < 7 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= xx_inner < 128 | 0
				4- for 0 <= yy_inner < 32 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t1625 = 0, t = t4, t1627 = 0, xx_outer, t1629 = 0, yy_outer, t1631 = 0, xx_inner, t1622 = 0, yy_inner, t1633 = 0] : (t5 - xx_inner) mod 128 = 0 and (-t6 + yy_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t5 <= 128xx_outer <= t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= xx_inner <= 127 and 0 <= yy_inner <= 31 }
<illegal>
 Tiling 2 loop names: t xx yy  deapth of outer is:1 test : xx & yy
-----------
Tiling L1 128 L2 64
0- for 0 <= t < 200 | 0
	1- for 0 <= xx_outer < 7 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= xx_inner < 128 | 0
				4- for 0 <= yy_inner < 64 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t1649 = 0, t = t4, t1651 = 0, xx_outer, t1653 = 0, yy_outer, t1655 = 0, xx_inner, t1646 = 0, yy_inner, t1657 = 0] : (t5 - xx_inner) mod 128 = 0 and (-t6 + yy_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t5 <= 128xx_outer <= t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= xx_inner <= 127 and 0 <= yy_inner <= 63 }
<illegal>
 Tiling 2 loop names: t xx yy  deapth of outer is:1 test : xx & yy
-----------
Tiling L1 128 L2 128
0- for 0 <= t < 200 | 0
	1- for 0 <= xx_outer < 7 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= xx_inner < 128 | 0
				4- for 0 <= yy_inner < 128 | 0
					conv
{ conv[t4, t5, t6] -> conv[0, t1673 = 0, t = t4, t1675 = 0, xx_outer, t1677 = 0, yy_outer, t1679 = 0, xx_inner, t1670 = 0, yy_inner, t1681 = 0] : (t5 - xx_inner) mod 128 = 0 and (-t6 + yy_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t5 <= 128xx_outer <= t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= xx_inner <= 127 and 0 <= yy_inner <= 127 }
<illegal>

original list
602.669006+
remaining list
602.669006+
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1619) {
    parallel (c3, max((c1 + -199), ((c1 - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), ((min(c1, ((c1 - int32(floor_f32(float32(((c1/3) + 1))))) + 341)) - max((c1 + -199), ((c1 - int32(floor_f32(float32(((c1 + 2)/3))))) + 1))) + 1)) {
      for (c5, 1, 1022) {
        buf_output[(c5 + int32((int64(((c3*3) - (c1*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(((c3*3) - (c1*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c5 + int32(((int64(((c3*3) - (c1*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(((c3*3) - (c1*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32((int64(((c3*3) - (c1*2)))*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32((int64(((c3*3) - (c1*2)))*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(((c3*3) - (c1*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c5 + int32(((int64(((c3*3) - (c1*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(((c3*3) - (c1*2)))*(int64)1024) + (int64)1024)))])
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Parallelize L1
0- for 0 <= t_skew_3_1 < 1619 | 0
	1- for 0 <= xx_skew < 127 | 0 | P
		2- for 1 <= yy < 1023 | 0
			conv
Evaluation : 185.837006

{ conv[t4, t5, t6] -> conv[t46 = 0, t47 = 0, t_skew_3_1 = 3t4 + t5, t49 = 0, xx_skew = 2t4 + t5, t51 = 0, yy = t6, t53 = 0] : 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 }


src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>

original list
185.837006+611.153992+
remaining list
185.837006+611.153992+ Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 51) {
    parallel (c3, max((c1 + -7), (c1 - int32(floor_f32(float32(((c1 + 2)/3)))))), ((min(c1, ((c1 - int32(floor_f32(float32(((c1 + 2)/3))))) + 11)) - max((c1 + -7), (c1 - int32(floor_f32(float32(((c1 + 2)/3))))))) + 1)) {
      for (c5, max((1 - min((c1*32), 1)), (((c3*48) - (c1*32)) + -511)), ((min(min((1619 - max((c1*32), 1588)), (((c3*48) - (c1*32)) + 46)), (((c3 - c1)*32) + 230)) - max((1 - min((c1*32), 1)), (((c3*48) - (c1*32)) + -511))) + 1)) {
        for (c7, max(max(((((c1 - c3)*32) + c5) + -199), (((((c1*21) - (c3*32)) + c5) + int32(floor_f32(float32(((c1 - c5)/3))))) + 1)), 0), ((min(min((((c1 - c3)*32) + c5), (((((c1*21) - (c3*32)) + c5) + int32(floor_f32(float32((((c1 - c5) + 32)/3))))) + 330)), 31) - max(max(((((c1 - c3)*32) + c5) + -199), (((((c1*21) - (c3*32)) + c5) + int32(floor_f32(float32(((c1 - c5)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 32 L1 32
0- for 0 <= t_skew_3_1_outer < 50 | 0
	1- for 0 <= xx_skew_outer < 3 | 0 | P
		2- for 0 <= t_skew_3_1_inner < 32 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 215.195999

{ conv[t4, t5, t6] -> conv[0, t1709 = 0, t_skew_3_1_outer, t1711 = 0, xx_skew_outer, t1713 = 0, t_skew_3_1_inner, t1706 = 0, xx_skew_inner, t1715 = 0, yy = t6, t1717 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + t5 <= 32t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and 0 <= t_skew_3_1_inner <= 31 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 32 L1 32 L2 32
0- for 0 <= t_skew_3_1_outer < 50 | 0
	1- for 0 <= xx_skew_outer < 3 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t1786 = 0, t_skew_3_1_outer, t1788 = 0, xx_skew_outer, t1790 = 0, yy_outer, t1792 = 0, t_skew_3_1_inner, t1794 = 0, xx_skew_inner, t1783 = 0, yy_inner, t1796 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + t5 <= 32t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 32 L1 32 L2 64
0- for 0 <= t_skew_3_1_outer < 50 | 0
	1- for 0 <= xx_skew_outer < 3 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t1829 = 0, t_skew_3_1_outer, t1831 = 0, xx_skew_outer, t1833 = 0, yy_outer, t1835 = 0, t_skew_3_1_inner, t1837 = 0, xx_skew_inner, t1826 = 0, yy_inner, t1839 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + t5 <= 32t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 32 L1 32 L2 128
0- for 0 <= t_skew_3_1_outer < 50 | 0
	1- for 0 <= xx_skew_outer < 3 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t1868 = 0, t_skew_3_1_outer, t1870 = 0, xx_skew_outer, t1872 = 0, yy_outer, t1874 = 0, t_skew_3_1_inner, t1876 = 0, xx_skew_inner, t1865 = 0, yy_inner, t1878 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + t5 <= 32t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 51) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + 1)/2)))) + -4), int32(floor_f32(float32((c1/3))))), ((min(int32(floor_f32(float32((c1/2)))), (int32(floor_f32(float32(((c1 + 1)/3)))) + 5)) - max((int32(floor_f32(float32(((c1 + 1)/2)))) + -4), int32(floor_f32(float32((c1/3)))))) + 1)) {
      for (c5, max((1 - min((c1*32), 1)), (((c3*96) - (c1*32)) + -511)), ((min(min((1619 - max((c1*32), 1588)), (((c3*96) - (c1*32)) + 94)), (((c3*64) - (c1*32)) + 262)) - max((1 - min((c1*32), 1)), (((c3*96) - (c1*32)) + -511))) + 1)) {
        for (c7, max(max(((((c1*32) - (c3*64)) + c5) + -199), (((((c1*21) - (c3*64)) + c5) + int32(floor_f32(float32(((c1 - c5)/3))))) + 1)), 0), ((min(min((((c1*32) - (c3*64)) + c5), (((((c1*21) - (c3*64)) + c5) + int32(floor_f32(float32((((c1 - c5) + 32)/3))))) + 330)), 63) - max(max(((((c1*32) - (c3*64)) + c5) + -199), (((((c1*21) - (c3*64)) + c5) + int32(floor_f32(float32(((c1 - c5)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 32 L1 64
0- for 0 <= t_skew_3_1_outer < 50 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= t_skew_3_1_inner < 32 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 270.888000

{ conv[t4, t5, t6] -> conv[0, t1894 = 0, t_skew_3_1_outer, t1896 = 0, xx_skew_outer, t1898 = 0, t_skew_3_1_inner, t1891 = 0, xx_skew_inner, t1900 = 0, yy = t6, t1902 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + t5 <= 32t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and 0 <= t_skew_3_1_inner <= 31 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 32 L1 64 L2 32
0- for 0 <= t_skew_3_1_outer < 50 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t1968 = 0, t_skew_3_1_outer, t1970 = 0, xx_skew_outer, t1972 = 0, yy_outer, t1974 = 0, t_skew_3_1_inner, t1976 = 0, xx_skew_inner, t1965 = 0, yy_inner, t1978 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + t5 <= 32t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 32 L1 64 L2 64
0- for 0 <= t_skew_3_1_outer < 50 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t2011 = 0, t_skew_3_1_outer, t2013 = 0, xx_skew_outer, t2015 = 0, yy_outer, t2017 = 0, t_skew_3_1_inner, t2019 = 0, xx_skew_inner, t2008 = 0, yy_inner, t2021 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + t5 <= 32t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 32 L1 64 L2 128
0- for 0 <= t_skew_3_1_outer < 50 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t2050 = 0, t_skew_3_1_outer, t2052 = 0, xx_skew_outer, t2054 = 0, yy_outer, t2056 = 0, t_skew_3_1_inner, t2058 = 0, xx_skew_inner, t2047 = 0, yy_inner, t2060 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + t5 <= 32t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 26) {
    parallel (c3, max(((c1*2) + -7), (c1 + int32(floor_f32(float32((c1/3)))))), ((min(min(((c1*2) + 1), ((c1 + int32(floor_f32(float32(((c1 + 2)/3))))) + 11)), 44) - max(((c1*2) + -7), (c1 + int32(floor_f32(float32((c1/3))))))) + 1)) {
      for (c5, max(max((1 - min((c1*64), 1)), (((c3*48) - (c1*64)) + -511)), ((c3*32) - (c1*64))), ((min(min((1619 - max((c1*64), 1556)), (((c3*48) - (c1*64)) + 46)), (((c3*32) - (c1*64)) + 230)) - max(max((1 - min((c1*64), 1)), (((c3*48) - (c1*64)) + -511)), ((c3*32) - (c1*64)))) + 1)) {
        for (c7, max(max(((((c1*64) - (c3*32)) + c5) + -199), (((((c1*43) - (c3*32)) + c5) - int32(floor_f32(float32((((c1 + c5) + 2)/3))))) + 1)), 0), ((min(min((((c1*64) - (c3*32)) + c5), (((((c1*43) - (c3*32)) + c5) - int32(floor_f32(float32((((c1 + c5)/3) + 1))))) + 341)), 31) - max(max(((((c1*64) - (c3*32)) + c5) + -199), (((((c1*43) - (c3*32)) + c5) - int32(floor_f32(float32((((c1 + c5) + 2)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 64 L1 32
0- for 0 <= t_skew_3_1_outer < 25 | 0
	1- for 0 <= xx_skew_outer < 3 | 0 | P
		2- for 0 <= t_skew_3_1_inner < 64 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 206.410995

{ conv[t4, t5, t6] -> conv[0, t2076 = 0, t_skew_3_1_outer, t2078 = 0, xx_skew_outer, t2080 = 0, t_skew_3_1_inner, t2073 = 0, xx_skew_inner, t2082 = 0, yy = t6, t2084 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (t4 + t5 + t_skew_3_1_inner - 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + t5 <= 64t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and 0 <= t_skew_3_1_inner <= 63 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 64 L1 32 L2 32
0- for 0 <= t_skew_3_1_outer < 25 | 0
	1- for 0 <= xx_skew_outer < 3 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t2150 = 0, t_skew_3_1_outer, t2152 = 0, xx_skew_outer, t2154 = 0, yy_outer, t2156 = 0, t_skew_3_1_inner, t2158 = 0, xx_skew_inner, t2147 = 0, yy_inner, t2160 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 + t_skew_3_1_inner - 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + t5 <= 64t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 64 L1 32 L2 64
0- for 0 <= t_skew_3_1_outer < 25 | 0
	1- for 0 <= xx_skew_outer < 3 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t2193 = 0, t_skew_3_1_outer, t2195 = 0, xx_skew_outer, t2197 = 0, yy_outer, t2199 = 0, t_skew_3_1_inner, t2201 = 0, xx_skew_inner, t2190 = 0, yy_inner, t2203 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 + t_skew_3_1_inner - 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + t5 <= 64t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 64 L1 32 L2 128
0- for 0 <= t_skew_3_1_outer < 25 | 0
	1- for 0 <= xx_skew_outer < 3 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t2232 = 0, t_skew_3_1_outer, t2234 = 0, xx_skew_outer, t2236 = 0, yy_outer, t2238 = 0, t_skew_3_1_inner, t2240 = 0, xx_skew_inner, t2229 = 0, yy_inner, t2242 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 + t_skew_3_1_inner - 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + t5 <= 64t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 26) {
    parallel (c3, max((c1 + -4), (c1 - int32(floor_f32(float32(((c1 + 2)/3)))))), ((min(c1, ((c1 - int32(floor_f32(float32(((c1/3) + 1))))) + 6)) - max((c1 + -4), (c1 - int32(floor_f32(float32(((c1 + 2)/3))))))) + 1)) {
      for (c5, max((1 - min((c1*64), 1)), (((c3*96) - (c1*64)) + -511)), ((min(min((1619 - max((c1*64), 1556)), (((c3*96) - (c1*64)) + 94)), (((c3 - c1)*64) + 262)) - max((1 - min((c1*64), 1)), (((c3*96) - (c1*64)) + -511))) + 1)) {
        for (c7, max(max(((((c1 - c3)*64) + c5) + -199), (((((c1*43) - (c3*64)) + c5) - int32(floor_f32(float32((((c1 + c5) + 2)/3))))) + 1)), 0), ((min(min((((c1 - c3)*64) + c5), (((((c1*43) - (c3*64)) + c5) - int32(floor_f32(float32((((c1 + c5)/3) + 1))))) + 341)), 63) - max(max(((((c1 - c3)*64) + c5) + -199), (((((c1*43) - (c3*64)) + c5) - int32(floor_f32(float32((((c1 + c5) + 2)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 64 L1 64
0- for 0 <= t_skew_3_1_outer < 25 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= t_skew_3_1_inner < 64 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 257.580994

{ conv[t4, t5, t6] -> conv[0, t2258 = 0, t_skew_3_1_outer, t2260 = 0, xx_skew_outer, t2262 = 0, t_skew_3_1_inner, t2255 = 0, xx_skew_inner, t2264 = 0, yy = t6, t2266 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + t5 <= 64t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and 0 <= t_skew_3_1_inner <= 63 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 64 L1 64 L2 32
0- for 0 <= t_skew_3_1_outer < 25 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t2332 = 0, t_skew_3_1_outer, t2334 = 0, xx_skew_outer, t2336 = 0, yy_outer, t2338 = 0, t_skew_3_1_inner, t2340 = 0, xx_skew_inner, t2329 = 0, yy_inner, t2342 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + t5 <= 64t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 64 L1 64 L2 64
0- for 0 <= t_skew_3_1_outer < 25 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t2375 = 0, t_skew_3_1_outer, t2377 = 0, xx_skew_outer, t2379 = 0, yy_outer, t2381 = 0, t_skew_3_1_inner, t2383 = 0, xx_skew_inner, t2372 = 0, yy_inner, t2385 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + t5 <= 64t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 64 L1 64 L2 128
0- for 0 <= t_skew_3_1_outer < 25 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t2414 = 0, t_skew_3_1_outer, t2416 = 0, xx_skew_outer, t2418 = 0, yy_outer, t2420 = 0, t_skew_3_1_inner, t2422 = 0, xx_skew_inner, t2411 = 0, yy_inner, t2424 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + t5 <= 64t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 13) {
    parallel (c3, max(((c1*4) + -7), ((c1*3) - int32(floor_f32(float32(((c1 + 2)/3)))))), ((min(min(((c1*4) + 3), (((c1*3) - int32(floor_f32(float32(((c1 + 2)/3))))) + 13)), 44) - max(((c1*4) + -7), ((c1*3) - int32(floor_f32(float32(((c1 + 2)/3))))))) + 1)) {
      for (c5, max(max((1 - min((c1*128), 1)), (((c3*48) - (c1*128)) + -511)), ((c3*32) - (c1*128))), ((min(min((1619 - max((c1*128), 1492)), (((c3*48) - (c1*128)) + 46)), (((c3*32) - (c1*128)) + 230)) - max(max((1 - min((c1*128), 1)), (((c3*48) - (c1*128)) + -511)), ((c3*32) - (c1*128)))) + 1)) {
        for (c7, max(max(((((c1*128) - (c3*32)) + c5) + -199), (((((c1*85) - (c3*32)) + c5) + int32(floor_f32(float32(((c1 - c5)/3))))) + 1)), 0), ((min(min((((c1*128) - (c3*32)) + c5), (((((c1*85) - (c3*32)) + c5) + int32(floor_f32(float32((((c1 - c5) + 128)/3))))) + 298)), 31) - max(max(((((c1*128) - (c3*32)) + c5) + -199), (((((c1*85) - (c3*32)) + c5) + int32(floor_f32(float32(((c1 - c5)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 128 L1 32
0- for 0 <= t_skew_3_1_outer < 12 | 0
	1- for 0 <= xx_skew_outer < 3 | 0 | P
		2- for 0 <= t_skew_3_1_inner < 128 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 175.785004

{ conv[t4, t5, t6] -> conv[0, t2440 = 0, t_skew_3_1_outer, t2442 = 0, xx_skew_outer, t2444 = 0, t_skew_3_1_inner, t2437 = 0, xx_skew_inner, t2446 = 0, yy = t6, t2448 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (t4 - t5 - 3t_skew_3_1_inner + 4xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + t5 <= 128t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and 0 <= t_skew_3_1_inner <= 127 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 128 L1 32 L2 32
0- for 0 <= t_skew_3_1_outer < 12 | 0
	1- for 0 <= xx_skew_outer < 3 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t2514 = 0, t_skew_3_1_outer, t2516 = 0, xx_skew_outer, t2518 = 0, yy_outer, t2520 = 0, t_skew_3_1_inner, t2522 = 0, xx_skew_inner, t2511 = 0, yy_inner, t2524 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t5 - 3t_skew_3_1_inner + 4xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + t5 <= 128t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 128 L1 32 L2 64
0- for 0 <= t_skew_3_1_outer < 12 | 0
	1- for 0 <= xx_skew_outer < 3 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t2557 = 0, t_skew_3_1_outer, t2559 = 0, xx_skew_outer, t2561 = 0, yy_outer, t2563 = 0, t_skew_3_1_inner, t2565 = 0, xx_skew_inner, t2554 = 0, yy_inner, t2567 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t5 - 3t_skew_3_1_inner + 4xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + t5 <= 128t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 128 L1 32 L2 128
0- for 0 <= t_skew_3_1_outer < 12 | 0
	1- for 0 <= xx_skew_outer < 3 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t2596 = 0, t_skew_3_1_outer, t2598 = 0, xx_skew_outer, t2600 = 0, yy_outer, t2602 = 0, t_skew_3_1_inner, t2604 = 0, xx_skew_inner, t2593 = 0, yy_inner, t2606 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t5 - 3t_skew_3_1_inner + 4xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + t5 <= 128t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 13) {
    parallel (c3, max(((c1*2) + -4), (c1 + int32(floor_f32(float32((c1/3)))))), ((min(((c1*2) + 1), ((c1 + int32(floor_f32(float32(((c1 + 1)/3))))) + 6)) - max(((c1*2) + -4), (c1 + int32(floor_f32(float32((c1/3))))))) + 1)) {
      for (c5, max(max((1 - min((c1*128), 1)), (((c3*96) - (c1*128)) + -511)), ((c3*64) - (c1*128))), ((min(min((1619 - max((c1*128), 1492)), (((c3*96) - (c1*128)) + 94)), (((c3*64) - (c1*128)) + 262)) - max(max((1 - min((c1*128), 1)), (((c3*96) - (c1*128)) + -511)), ((c3*64) - (c1*128)))) + 1)) {
        for (c7, max(max(((((c1*128) - (c3*64)) + c5) + -199), (((((c1*85) - (c3*64)) + c5) + int32(floor_f32(float32(((c1 - c5)/3))))) + 1)), 0), ((min(min((((c1*128) - (c3*64)) + c5), (((((c1*85) - (c3*64)) + c5) + int32(floor_f32(float32((((c1 - c5) + 128)/3))))) + 298)), 63) - max(max(((((c1*128) - (c3*64)) + c5) + -199), (((((c1*85) - (c3*64)) + c5) + int32(floor_f32(float32(((c1 - c5)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 128 L1 64
0- for 0 <= t_skew_3_1_outer < 12 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= t_skew_3_1_inner < 128 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 236.927994

{ conv[t4, t5, t6] -> conv[0, t2622 = 0, t_skew_3_1_outer, t2624 = 0, xx_skew_outer, t2626 = 0, t_skew_3_1_inner, t2619 = 0, xx_skew_inner, t2628 = 0, yy = t6, t2630 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (t4 + t5 + t_skew_3_1_inner - 2xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + t5 <= 128t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and 0 <= t_skew_3_1_inner <= 127 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 128 L1 64 L2 32
0- for 0 <= t_skew_3_1_outer < 12 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t2696 = 0, t_skew_3_1_outer, t2698 = 0, xx_skew_outer, t2700 = 0, yy_outer, t2702 = 0, t_skew_3_1_inner, t2704 = 0, xx_skew_inner, t2693 = 0, yy_inner, t2706 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 + t_skew_3_1_inner - 2xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + t5 <= 128t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 128 L1 64 L2 64
0- for 0 <= t_skew_3_1_outer < 12 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t2739 = 0, t_skew_3_1_outer, t2741 = 0, xx_skew_outer, t2743 = 0, yy_outer, t2745 = 0, t_skew_3_1_inner, t2747 = 0, xx_skew_inner, t2736 = 0, yy_inner, t2749 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 + t_skew_3_1_inner - 2xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + t5 <= 128t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L0 128 L1 64 L2 128
0- for 0 <= t_skew_3_1_outer < 12 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t2778 = 0, t_skew_3_1_outer, t2780 = 0, xx_skew_outer, t2782 = 0, yy_outer, t2784 = 0, t_skew_3_1_inner, t2786 = 0, xx_skew_inner, t2775 = 0, yy_inner, t2788 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 + t_skew_3_1_inner - 2xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + t5 <= 128t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1619) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 1)/48))))), ((min(int32(floor_f32(float32((c1/32)))), (int32(floor_f32(float32(((c1 + 31)/48)))) + 10)) - max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 1)/48)))))) + 1)) {
      for (c5, 0, 32) {
        for (c7, max(max(((c1 - (c3*32)) + -199), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0), ((min(min((c1 - (c3*32)), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1/3) + 1))))) + 341)), 31) - max(max(((c1 - (c3*32)) + -199), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*32), 1)), ((min((c5*32), 1) - max((c5*32), 991)) + 1022)) {
            buf_output[(((c5*32) + c9) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*32) + c9) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*32) + c9) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L1 32 L2 32
0- for 0 <= t_skew_3_1 < 1619 | 0
	1- for 0 <= xx_skew_outer < 3 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 32 | 0
					conv
Evaluation : 329.812988

{ conv[t4, t5, t6] -> conv[0, t2804 = 0, t_skew_3_1 = 3t4 + t5, t2806 = 0, xx_skew_outer, t2808 = 0, yy_outer, t2810 = 0, xx_skew_inner, t2801 = 0, yy_inner, t2812 = 0] : (t5 + xx_skew_inner) mod 2 = 0 and (-t6 + yy_inner) mod 32 = 0 and (2t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1619) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 1)/48))))), ((min(int32(floor_f32(float32((c1/32)))), (int32(floor_f32(float32(((c1 + 31)/48)))) + 10)) - max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 1)/48)))))) + 1)) {
      for (c5, 0, 16) {
        for (c7, max(max(((c1 - (c3*32)) + -199), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0), ((min(min((c1 - (c3*32)), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1/3) + 1))))) + 341)), 31) - max(max(((c1 - (c3*32)) + -199), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*64), 1)), ((min((c5*64), 1) - max((c5*64), 959)) + 1022)) {
            buf_output[(((c5*64) + c9) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*64) + c9) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*64) + c9) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L1 32 L2 64
0- for 0 <= t_skew_3_1 < 1619 | 0
	1- for 0 <= xx_skew_outer < 3 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 64 | 0
					conv
Evaluation : 298.584015

{ conv[t4, t5, t6] -> conv[0, t2865 = 0, t_skew_3_1 = 3t4 + t5, t2867 = 0, xx_skew_outer, t2869 = 0, yy_outer, t2871 = 0, xx_skew_inner, t2862 = 0, yy_inner, t2873 = 0] : (t5 + xx_skew_inner) mod 2 = 0 and (-t6 + yy_inner) mod 64 = 0 and (2t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1619) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 1)/48))))), ((min(int32(floor_f32(float32((c1/32)))), (int32(floor_f32(float32(((c1 + 31)/48)))) + 10)) - max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 1)/48)))))) + 1)) {
      for (c5, 0, 8) {
        for (c7, max(max(((c1 - (c3*32)) + -199), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0), ((min(min((c1 - (c3*32)), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1/3) + 1))))) + 341)), 31) - max(max(((c1 - (c3*32)) + -199), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*128), 1)), ((min((c5*128), 1) - max((c5*128), 895)) + 1022)) {
            buf_output[(((c5*128) + c9) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*128) + c9) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*128) + c9) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L1 32 L2 128
0- for 0 <= t_skew_3_1 < 1619 | 0
	1- for 0 <= xx_skew_outer < 3 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 128 | 0
					conv
Evaluation : 274.434998

{ conv[t4, t5, t6] -> conv[0, t2929 = 0, t_skew_3_1 = 3t4 + t5, t2931 = 0, xx_skew_outer, t2933 = 0, yy_outer, t2935 = 0, xx_skew_inner, t2926 = 0, yy_inner, t2937 = 0] : (t5 + xx_skew_inner) mod 2 = 0 and (-t6 + yy_inner) mod 128 = 0 and (2t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1619) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 1)/96))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 31)/96)))) + 5)) - max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 1)/96)))))) + 1)) {
      for (c5, 0, 32) {
        for (c7, max(max(((c1 - (c3*64)) + -199), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0), ((min(min((c1 - (c3*64)), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1/3) + 1))))) + 341)), 63) - max(max(((c1 - (c3*64)) + -199), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*32), 1)), ((min((c5*32), 1) - max((c5*32), 991)) + 1022)) {
            buf_output[(((c5*32) + c9) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*32) + c9) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*32) + c9) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L1 64 L2 32
0- for 0 <= t_skew_3_1 < 1619 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 32 | 0
					conv
Evaluation : 402.230988

{ conv[t4, t5, t6] -> conv[0, t2993 = 0, t_skew_3_1 = 3t4 + t5, t2995 = 0, xx_skew_outer, t2997 = 0, yy_outer, t2999 = 0, xx_skew_inner, t2990 = 0, yy_inner, t3001 = 0] : (t5 + xx_skew_inner) mod 2 = 0 and (-t6 + yy_inner) mod 32 = 0 and (2t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1619) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 1)/96))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 31)/96)))) + 5)) - max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 1)/96)))))) + 1)) {
      for (c5, 0, 16) {
        for (c7, max(max(((c1 - (c3*64)) + -199), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0), ((min(min((c1 - (c3*64)), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1/3) + 1))))) + 341)), 63) - max(max(((c1 - (c3*64)) + -199), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*64), 1)), ((min((c5*64), 1) - max((c5*64), 959)) + 1022)) {
            buf_output[(((c5*64) + c9) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*64) + c9) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*64) + c9) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L1 64 L2 64
0- for 0 <= t_skew_3_1 < 1619 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 64 | 0
					conv
Evaluation : 358.183990

{ conv[t4, t5, t6] -> conv[0, t3057 = 0, t_skew_3_1 = 3t4 + t5, t3059 = 0, xx_skew_outer, t3061 = 0, yy_outer, t3063 = 0, xx_skew_inner, t3054 = 0, yy_inner, t3065 = 0] : (t5 + xx_skew_inner) mod 2 = 0 and (-t6 + yy_inner) mod 64 = 0 and (2t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1619) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 1)/96))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 31)/96)))) + 5)) - max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 1)/96)))))) + 1)) {
      for (c5, 0, 8) {
        for (c7, max(max(((c1 - (c3*64)) + -199), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0), ((min(min((c1 - (c3*64)), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1/3) + 1))))) + 341)), 63) - max(max(((c1 - (c3*64)) + -199), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*128), 1)), ((min((c5*128), 1) - max((c5*128), 895)) + 1022)) {
            buf_output[(((c5*128) + c9) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*128) + c9) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*128) + c9) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Parallelize L1
Tiling L1 64 L2 128
0- for 0 <= t_skew_3_1 < 1619 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 128 | 0
					conv
Evaluation : 329.990997

{ conv[t4, t5, t6] -> conv[0, t3121 = 0, t_skew_3_1 = 3t4 + t5, t3123 = 0, xx_skew_outer, t3125 = 0, yy_outer, t3127 = 0, xx_skew_inner, t3118 = 0, yy_inner, t3129 = 0] : (t5 + xx_skew_inner) mod 2 = 0 and (-t6 + yy_inner) mod 128 = 0 and (2t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>

original list
215.195999+270.888000+206.410995+257.580994+175.785004+236.927994+329.812988+298.584015+274.434998+402.230988+358.183990+329.990997+185.837006+
remaining list
175.785004+185.837006+206.410995+215.195999+ Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 51) {
    for (c3, max((c1 + -7), (c1 - int32(floor_f32(float32(((c1 + 2)/3)))))), ((min(c1, ((c1 - int32(floor_f32(float32(((c1 + 2)/3))))) + 11)) - max((c1 + -7), (c1 - int32(floor_f32(float32(((c1 + 2)/3))))))) + 1)) {
      for (c5, max((1 - min((c1*32), 1)), (((c3*48) - (c1*32)) + -511)), ((min(min((1619 - max((c1*32), 1588)), (((c3*48) - (c1*32)) + 46)), (((c3 - c1)*32) + 230)) - max((1 - min((c1*32), 1)), (((c3*48) - (c1*32)) + -511))) + 1)) {
        for (c7, max(max(((((c1 - c3)*32) + c5) + -199), (((((c1*21) - (c3*32)) + c5) + int32(floor_f32(float32(((c1 - c5)/3))))) + 1)), 0), ((min(min((((c1 - c3)*32) + c5), (((((c1*21) - (c3*32)) + c5) + int32(floor_f32(float32((((c1 - c5) + 32)/3))))) + 330)), 31) - max(max(((((c1 - c3)*32) + c5) + -199), (((((c1*21) - (c3*32)) + c5) + int32(floor_f32(float32(((c1 - c5)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Tiling L0 32 L1 32
0- for 0 <= t_skew_3_1_outer < 50 | 0
	1- for 0 <= xx_skew_outer < 3 | 0
		2- for 0 <= t_skew_3_1_inner < 32 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 595.075989

{ conv[t4, t5, t6] -> conv[0, t3185 = 0, t_skew_3_1_outer, t3187 = 0, xx_skew_outer, t3189 = 0, t_skew_3_1_inner, t3182 = 0, xx_skew_inner, t3191 = 0, yy = t6, t3193 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + t5 <= 32t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and 0 <= t_skew_3_1_inner <= 31 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 32 L1 32 L2 32
0- for 0 <= t_skew_3_1_outer < 50 | 0
	1- for 0 <= xx_skew_outer < 3 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t3261 = 0, t_skew_3_1_outer, t3263 = 0, xx_skew_outer, t3265 = 0, yy_outer, t3267 = 0, t_skew_3_1_inner, t3269 = 0, xx_skew_inner, t3258 = 0, yy_inner, t3271 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + t5 <= 32t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 32 L1 32 L2 64
0- for 0 <= t_skew_3_1_outer < 50 | 0
	1- for 0 <= xx_skew_outer < 3 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t3304 = 0, t_skew_3_1_outer, t3306 = 0, xx_skew_outer, t3308 = 0, yy_outer, t3310 = 0, t_skew_3_1_inner, t3312 = 0, xx_skew_inner, t3301 = 0, yy_inner, t3314 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + t5 <= 32t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 32 L1 32 L2 128
0- for 0 <= t_skew_3_1_outer < 50 | 0
	1- for 0 <= xx_skew_outer < 3 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t3343 = 0, t_skew_3_1_outer, t3345 = 0, xx_skew_outer, t3347 = 0, yy_outer, t3349 = 0, t_skew_3_1_inner, t3351 = 0, xx_skew_inner, t3340 = 0, yy_inner, t3353 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + t5 <= 32t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 51) {
    for (c3, max((int32(floor_f32(float32(((c1 + 1)/2)))) + -4), int32(floor_f32(float32((c1/3))))), ((min(int32(floor_f32(float32((c1/2)))), (int32(floor_f32(float32(((c1 + 1)/3)))) + 5)) - max((int32(floor_f32(float32(((c1 + 1)/2)))) + -4), int32(floor_f32(float32((c1/3)))))) + 1)) {
      for (c5, max((1 - min((c1*32), 1)), (((c3*96) - (c1*32)) + -511)), ((min(min((1619 - max((c1*32), 1588)), (((c3*96) - (c1*32)) + 94)), (((c3*64) - (c1*32)) + 262)) - max((1 - min((c1*32), 1)), (((c3*96) - (c1*32)) + -511))) + 1)) {
        for (c7, max(max(((((c1*32) - (c3*64)) + c5) + -199), (((((c1*21) - (c3*64)) + c5) + int32(floor_f32(float32(((c1 - c5)/3))))) + 1)), 0), ((min(min((((c1*32) - (c3*64)) + c5), (((((c1*21) - (c3*64)) + c5) + int32(floor_f32(float32((((c1 - c5) + 32)/3))))) + 330)), 63) - max(max(((((c1*32) - (c3*64)) + c5) + -199), (((((c1*21) - (c3*64)) + c5) + int32(floor_f32(float32(((c1 - c5)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*64)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Tiling L0 32 L1 64
0- for 0 <= t_skew_3_1_outer < 50 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= t_skew_3_1_inner < 32 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 612.414978

{ conv[t4, t5, t6] -> conv[0, t3369 = 0, t_skew_3_1_outer, t3371 = 0, xx_skew_outer, t3373 = 0, t_skew_3_1_inner, t3366 = 0, xx_skew_inner, t3375 = 0, yy = t6, t3377 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + t5 <= 32t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and 0 <= t_skew_3_1_inner <= 31 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 32 L1 64 L2 32
0- for 0 <= t_skew_3_1_outer < 50 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t3442 = 0, t_skew_3_1_outer, t3444 = 0, xx_skew_outer, t3446 = 0, yy_outer, t3448 = 0, t_skew_3_1_inner, t3450 = 0, xx_skew_inner, t3439 = 0, yy_inner, t3452 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + t5 <= 32t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 32 L1 64 L2 64
0- for 0 <= t_skew_3_1_outer < 50 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t3485 = 0, t_skew_3_1_outer, t3487 = 0, xx_skew_outer, t3489 = 0, yy_outer, t3491 = 0, t_skew_3_1_inner, t3493 = 0, xx_skew_inner, t3482 = 0, yy_inner, t3495 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + t5 <= 32t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 32 L1 64 L2 128
0- for 0 <= t_skew_3_1_outer < 50 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t3524 = 0, t_skew_3_1_outer, t3526 = 0, xx_skew_outer, t3528 = 0, yy_outer, t3530 = 0, t_skew_3_1_inner, t3532 = 0, xx_skew_inner, t3521 = 0, yy_inner, t3534 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + t5 <= 32t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 26) {
    for (c3, max(((c1*2) + -7), (c1 + int32(floor_f32(float32((c1/3)))))), ((min(min(((c1*2) + 1), ((c1 + int32(floor_f32(float32(((c1 + 2)/3))))) + 11)), 44) - max(((c1*2) + -7), (c1 + int32(floor_f32(float32((c1/3))))))) + 1)) {
      for (c5, max(max((1 - min((c1*64), 1)), (((c3*48) - (c1*64)) + -511)), ((c3*32) - (c1*64))), ((min(min((1619 - max((c1*64), 1556)), (((c3*48) - (c1*64)) + 46)), (((c3*32) - (c1*64)) + 230)) - max(max((1 - min((c1*64), 1)), (((c3*48) - (c1*64)) + -511)), ((c3*32) - (c1*64)))) + 1)) {
        for (c7, max(max(((((c1*64) - (c3*32)) + c5) + -199), (((((c1*43) - (c3*32)) + c5) - int32(floor_f32(float32((((c1 + c5) + 2)/3))))) + 1)), 0), ((min(min((((c1*64) - (c3*32)) + c5), (((((c1*43) - (c3*32)) + c5) - int32(floor_f32(float32((((c1 + c5)/3) + 1))))) + 341)), 31) - max(max(((((c1*64) - (c3*32)) + c5) + -199), (((((c1*43) - (c3*32)) + c5) - int32(floor_f32(float32((((c1 + c5) + 2)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Tiling L0 64 L1 32
0- for 0 <= t_skew_3_1_outer < 25 | 0
	1- for 0 <= xx_skew_outer < 3 | 0
		2- for 0 <= t_skew_3_1_inner < 64 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 590.935974

{ conv[t4, t5, t6] -> conv[0, t3550 = 0, t_skew_3_1_outer, t3552 = 0, xx_skew_outer, t3554 = 0, t_skew_3_1_inner, t3547 = 0, xx_skew_inner, t3556 = 0, yy = t6, t3558 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (t4 + t5 + t_skew_3_1_inner - 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + t5 <= 64t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and 0 <= t_skew_3_1_inner <= 63 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 64 L1 32 L2 32
0- for 0 <= t_skew_3_1_outer < 25 | 0
	1- for 0 <= xx_skew_outer < 3 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t3623 = 0, t_skew_3_1_outer, t3625 = 0, xx_skew_outer, t3627 = 0, yy_outer, t3629 = 0, t_skew_3_1_inner, t3631 = 0, xx_skew_inner, t3620 = 0, yy_inner, t3633 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 + t_skew_3_1_inner - 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + t5 <= 64t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 64 L1 32 L2 64
0- for 0 <= t_skew_3_1_outer < 25 | 0
	1- for 0 <= xx_skew_outer < 3 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t3666 = 0, t_skew_3_1_outer, t3668 = 0, xx_skew_outer, t3670 = 0, yy_outer, t3672 = 0, t_skew_3_1_inner, t3674 = 0, xx_skew_inner, t3663 = 0, yy_inner, t3676 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 + t_skew_3_1_inner - 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + t5 <= 64t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 64 L1 32 L2 128
0- for 0 <= t_skew_3_1_outer < 25 | 0
	1- for 0 <= xx_skew_outer < 3 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t3705 = 0, t_skew_3_1_outer, t3707 = 0, xx_skew_outer, t3709 = 0, yy_outer, t3711 = 0, t_skew_3_1_inner, t3713 = 0, xx_skew_inner, t3702 = 0, yy_inner, t3715 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 + t_skew_3_1_inner - 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + t5 <= 64t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 26) {
    for (c3, max((c1 + -4), (c1 - int32(floor_f32(float32(((c1 + 2)/3)))))), ((min(c1, ((c1 - int32(floor_f32(float32(((c1/3) + 1))))) + 6)) - max((c1 + -4), (c1 - int32(floor_f32(float32(((c1 + 2)/3))))))) + 1)) {
      for (c5, max((1 - min((c1*64), 1)), (((c3*96) - (c1*64)) + -511)), ((min(min((1619 - max((c1*64), 1556)), (((c3*96) - (c1*64)) + 94)), (((c3 - c1)*64) + 262)) - max((1 - min((c1*64), 1)), (((c3*96) - (c1*64)) + -511))) + 1)) {
        for (c7, max(max(((((c1 - c3)*64) + c5) + -199), (((((c1*43) - (c3*64)) + c5) - int32(floor_f32(float32((((c1 + c5) + 2)/3))))) + 1)), 0), ((min(min((((c1 - c3)*64) + c5), (((((c1*43) - (c3*64)) + c5) - int32(floor_f32(float32((((c1 + c5)/3) + 1))))) + 341)), 63) - max(max(((((c1 - c3)*64) + c5) + -199), (((((c1*43) - (c3*64)) + c5) - int32(floor_f32(float32((((c1 + c5) + 2)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*128)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Tiling L0 64 L1 64
0- for 0 <= t_skew_3_1_outer < 25 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= t_skew_3_1_inner < 64 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 605.320984

{ conv[t4, t5, t6] -> conv[0, t3731 = 0, t_skew_3_1_outer, t3733 = 0, xx_skew_outer, t3735 = 0, t_skew_3_1_inner, t3728 = 0, xx_skew_inner, t3737 = 0, yy = t6, t3739 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + t5 <= 64t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and 0 <= t_skew_3_1_inner <= 63 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 64 L1 64 L2 32
0- for 0 <= t_skew_3_1_outer < 25 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t3804 = 0, t_skew_3_1_outer, t3806 = 0, xx_skew_outer, t3808 = 0, yy_outer, t3810 = 0, t_skew_3_1_inner, t3812 = 0, xx_skew_inner, t3801 = 0, yy_inner, t3814 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + t5 <= 64t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 64 L1 64 L2 64
0- for 0 <= t_skew_3_1_outer < 25 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t3847 = 0, t_skew_3_1_outer, t3849 = 0, xx_skew_outer, t3851 = 0, yy_outer, t3853 = 0, t_skew_3_1_inner, t3855 = 0, xx_skew_inner, t3844 = 0, yy_inner, t3857 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + t5 <= 64t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 64 L1 64 L2 128
0- for 0 <= t_skew_3_1_outer < 25 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t3886 = 0, t_skew_3_1_outer, t3888 = 0, xx_skew_outer, t3890 = 0, yy_outer, t3892 = 0, t_skew_3_1_inner, t3894 = 0, xx_skew_inner, t3883 = 0, yy_inner, t3896 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_3_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + t5 <= 64t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 13) {
    for (c3, max(((c1*4) + -7), ((c1*3) - int32(floor_f32(float32(((c1 + 2)/3)))))), ((min(min(((c1*4) + 3), (((c1*3) - int32(floor_f32(float32(((c1 + 2)/3))))) + 13)), 44) - max(((c1*4) + -7), ((c1*3) - int32(floor_f32(float32(((c1 + 2)/3))))))) + 1)) {
      for (c5, max(max((1 - min((c1*128), 1)), (((c3*48) - (c1*128)) + -511)), ((c3*32) - (c1*128))), ((min(min((1619 - max((c1*128), 1492)), (((c3*48) - (c1*128)) + 46)), (((c3*32) - (c1*128)) + 230)) - max(max((1 - min((c1*128), 1)), (((c3*48) - (c1*128)) + -511)), ((c3*32) - (c1*128)))) + 1)) {
        for (c7, max(max(((((c1*128) - (c3*32)) + c5) + -199), (((((c1*85) - (c3*32)) + c5) + int32(floor_f32(float32(((c1 - c5)/3))))) + 1)), 0), ((min(min((((c1*128) - (c3*32)) + c5), (((((c1*85) - (c3*32)) + c5) + int32(floor_f32(float32((((c1 - c5) + 128)/3))))) + 298)), 31) - max(max(((((c1*128) - (c3*32)) + c5) + -199), (((((c1*85) - (c3*32)) + c5) + int32(floor_f32(float32(((c1 - c5)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Tiling L0 128 L1 32
0- for 0 <= t_skew_3_1_outer < 12 | 0
	1- for 0 <= xx_skew_outer < 3 | 0
		2- for 0 <= t_skew_3_1_inner < 128 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 614.880005

{ conv[t4, t5, t6] -> conv[0, t3912 = 0, t_skew_3_1_outer, t3914 = 0, xx_skew_outer, t3916 = 0, t_skew_3_1_inner, t3909 = 0, xx_skew_inner, t3918 = 0, yy = t6, t3920 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (t4 - t5 - 3t_skew_3_1_inner + 4xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + t5 <= 128t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and 0 <= t_skew_3_1_inner <= 127 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 128 L1 32 L2 32
0- for 0 <= t_skew_3_1_outer < 12 | 0
	1- for 0 <= xx_skew_outer < 3 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t3985 = 0, t_skew_3_1_outer, t3987 = 0, xx_skew_outer, t3989 = 0, yy_outer, t3991 = 0, t_skew_3_1_inner, t3993 = 0, xx_skew_inner, t3982 = 0, yy_inner, t3995 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t5 - 3t_skew_3_1_inner + 4xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + t5 <= 128t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 128 L1 32 L2 64
0- for 0 <= t_skew_3_1_outer < 12 | 0
	1- for 0 <= xx_skew_outer < 3 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t4028 = 0, t_skew_3_1_outer, t4030 = 0, xx_skew_outer, t4032 = 0, yy_outer, t4034 = 0, t_skew_3_1_inner, t4036 = 0, xx_skew_inner, t4025 = 0, yy_inner, t4038 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t5 - 3t_skew_3_1_inner + 4xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + t5 <= 128t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 128 L1 32 L2 128
0- for 0 <= t_skew_3_1_outer < 12 | 0
	1- for 0 <= xx_skew_outer < 3 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t4067 = 0, t_skew_3_1_outer, t4069 = 0, xx_skew_outer, t4071 = 0, yy_outer, t4073 = 0, t_skew_3_1_inner, t4075 = 0, xx_skew_inner, t4064 = 0, yy_inner, t4077 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t5 - 3t_skew_3_1_inner + 4xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + t5 <= 128t_skew_3_1_outer <= 3t4 + t5 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 13) {
    for (c3, max(((c1*2) + -4), (c1 + int32(floor_f32(float32((c1/3)))))), ((min(((c1*2) + 1), ((c1 + int32(floor_f32(float32(((c1 + 1)/3))))) + 6)) - max(((c1*2) + -4), (c1 + int32(floor_f32(float32((c1/3))))))) + 1)) {
      for (c5, max(max((1 - min((c1*128), 1)), (((c3*96) - (c1*128)) + -511)), ((c3*64) - (c1*128))), ((min(min((1619 - max((c1*128), 1492)), (((c3*96) - (c1*128)) + 94)), (((c3*64) - (c1*128)) + 262)) - max(max((1 - min((c1*128), 1)), (((c3*96) - (c1*128)) + -511)), ((c3*64) - (c1*128)))) + 1)) {
        for (c7, max(max(((((c1*128) - (c3*64)) + c5) + -199), (((((c1*85) - (c3*64)) + c5) + int32(floor_f32(float32(((c1 - c5)/3))))) + 1)), 0), ((min(min((((c1*128) - (c3*64)) + c5), (((((c1*85) - (c3*64)) + c5) + int32(floor_f32(float32((((c1 - c5) + 128)/3))))) + 298)), 63) - max(max(((((c1*128) - (c3*64)) + c5) + -199), (((((c1*85) - (c3*64)) + c5) + int32(floor_f32(float32(((c1 - c5)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*256)) - (c5*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Tiling L0 128 L1 64
0- for 0 <= t_skew_3_1_outer < 12 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= t_skew_3_1_inner < 128 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 624.525024

{ conv[t4, t5, t6] -> conv[0, t4093 = 0, t_skew_3_1_outer, t4095 = 0, xx_skew_outer, t4097 = 0, t_skew_3_1_inner, t4090 = 0, xx_skew_inner, t4099 = 0, yy = t6, t4101 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (t4 + t5 + t_skew_3_1_inner - 2xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + t5 <= 128t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and 0 <= t_skew_3_1_inner <= 127 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 128 L1 64 L2 32
0- for 0 <= t_skew_3_1_outer < 12 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t4166 = 0, t_skew_3_1_outer, t4168 = 0, xx_skew_outer, t4170 = 0, yy_outer, t4172 = 0, t_skew_3_1_inner, t4174 = 0, xx_skew_inner, t4163 = 0, yy_inner, t4176 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 + t_skew_3_1_inner - 2xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + t5 <= 128t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 128 L1 64 L2 64
0- for 0 <= t_skew_3_1_outer < 12 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t4209 = 0, t_skew_3_1_outer, t4211 = 0, xx_skew_outer, t4213 = 0, yy_outer, t4215 = 0, t_skew_3_1_inner, t4217 = 0, xx_skew_inner, t4206 = 0, yy_inner, t4219 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 + t_skew_3_1_inner - 2xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + t5 <= 128t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:0 test : t_skew_3_1 & xx_skew
-----------
Skewing L0 3 L1 1
Tiling L0 128 L1 64 L2 128
0- for 0 <= t_skew_3_1_outer < 12 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t4248 = 0, t_skew_3_1_outer, t4250 = 0, xx_skew_outer, t4252 = 0, yy_outer, t4254 = 0, t_skew_3_1_inner, t4256 = 0, xx_skew_inner, t4245 = 0, yy_inner, t4258 = 0] : (t5 + 2t_skew_3_1_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 + t_skew_3_1_inner - 2xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + t5 <= 128t_skew_3_1_outer <= 3t4 + t5 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_1_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1619) {
    for (c3, max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 1)/48))))), ((min(int32(floor_f32(float32((c1/32)))), (int32(floor_f32(float32(((c1 + 31)/48)))) + 10)) - max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 1)/48)))))) + 1)) {
      for (c5, 0, 32) {
        for (c7, max(max(((c1 - (c3*32)) + -199), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0), ((min(min((c1 - (c3*32)), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1/3) + 1))))) + 341)), 31) - max(max(((c1 - (c3*32)) + -199), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*32), 1)), ((min((c5*32), 1) - max((c5*32), 991)) + 1022)) {
            buf_output[(((c5*32) + c9) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*32) + c9) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*32) + c9) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Tiling L1 32 L2 32
0- for 0 <= t_skew_3_1 < 1619 | 0
	1- for 0 <= xx_skew_outer < 3 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 32 | 0
					conv
Evaluation : 747.395020

{ conv[t4, t5, t6] -> conv[0, t4274 = 0, t_skew_3_1 = 3t4 + t5, t4276 = 0, xx_skew_outer, t4278 = 0, yy_outer, t4280 = 0, xx_skew_inner, t4271 = 0, yy_inner, t4282 = 0] : (t5 + xx_skew_inner) mod 2 = 0 and (-t6 + yy_inner) mod 32 = 0 and (2t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1619) {
    for (c3, max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 1)/48))))), ((min(int32(floor_f32(float32((c1/32)))), (int32(floor_f32(float32(((c1 + 31)/48)))) + 10)) - max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 1)/48)))))) + 1)) {
      for (c5, 0, 16) {
        for (c7, max(max(((c1 - (c3*32)) + -199), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0), ((min(min((c1 - (c3*32)), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1/3) + 1))))) + 341)), 31) - max(max(((c1 - (c3*32)) + -199), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*64), 1)), ((min((c5*64), 1) - max((c5*64), 959)) + 1022)) {
            buf_output[(((c5*64) + c9) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*64) + c9) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*64) + c9) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Tiling L1 32 L2 64
0- for 0 <= t_skew_3_1 < 1619 | 0
	1- for 0 <= xx_skew_outer < 3 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 64 | 0
					conv
Evaluation : 694.080017

{ conv[t4, t5, t6] -> conv[0, t4334 = 0, t_skew_3_1 = 3t4 + t5, t4336 = 0, xx_skew_outer, t4338 = 0, yy_outer, t4340 = 0, xx_skew_inner, t4331 = 0, yy_inner, t4342 = 0] : (t5 + xx_skew_inner) mod 2 = 0 and (-t6 + yy_inner) mod 64 = 0 and (2t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1619) {
    for (c3, max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 1)/48))))), ((min(int32(floor_f32(float32((c1/32)))), (int32(floor_f32(float32(((c1 + 31)/48)))) + 10)) - max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 1)/48)))))) + 1)) {
      for (c5, 0, 8) {
        for (c7, max(max(((c1 - (c3*32)) + -199), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0), ((min(min((c1 - (c3*32)), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1/3) + 1))))) + 341)), 31) - max(max(((c1 - (c3*32)) + -199), (((c1 - (c3*32)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*128), 1)), ((min((c5*128), 1) - max((c5*128), 895)) + 1022)) {
            buf_output[(((c5*128) + c9) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*128) + c9) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*128) + c9) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*96) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Tiling L1 32 L2 128
0- for 0 <= t_skew_3_1 < 1619 | 0
	1- for 0 <= xx_skew_outer < 3 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 128 | 0
					conv
Evaluation : 652.744995

{ conv[t4, t5, t6] -> conv[0, t4397 = 0, t_skew_3_1 = 3t4 + t5, t4399 = 0, xx_skew_outer, t4401 = 0, yy_outer, t4403 = 0, xx_skew_inner, t4394 = 0, yy_inner, t4405 = 0] : (t5 + xx_skew_inner) mod 2 = 0 and (-t6 + yy_inner) mod 128 = 0 and (2t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32xx_skew_outer <= 2t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1619) {
    for (c3, max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 1)/96))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 31)/96)))) + 5)) - max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 1)/96)))))) + 1)) {
      for (c5, 0, 32) {
        for (c7, max(max(((c1 - (c3*64)) + -199), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0), ((min(min((c1 - (c3*64)), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1/3) + 1))))) + 341)), 63) - max(max(((c1 - (c3*64)) + -199), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*32), 1)), ((min((c5*32), 1) - max((c5*32), 991)) + 1022)) {
            buf_output[(((c5*32) + c9) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*32) + c9) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*32) + c9) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Tiling L1 64 L2 32
0- for 0 <= t_skew_3_1 < 1619 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 32 | 0
					conv
Evaluation : 731.723022

{ conv[t4, t5, t6] -> conv[0, t4460 = 0, t_skew_3_1 = 3t4 + t5, t4462 = 0, xx_skew_outer, t4464 = 0, yy_outer, t4466 = 0, xx_skew_inner, t4457 = 0, yy_inner, t4468 = 0] : (t5 + xx_skew_inner) mod 2 = 0 and (-t6 + yy_inner) mod 32 = 0 and (2t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1619) {
    for (c3, max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 1)/96))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 31)/96)))) + 5)) - max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 1)/96)))))) + 1)) {
      for (c5, 0, 16) {
        for (c7, max(max(((c1 - (c3*64)) + -199), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0), ((min(min((c1 - (c3*64)), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1/3) + 1))))) + 341)), 63) - max(max(((c1 - (c3*64)) + -199), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*64), 1)), ((min((c5*64), 1) - max((c5*64), 959)) + 1022)) {
            buf_output[(((c5*64) + c9) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*64) + c9) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*64) + c9) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Tiling L1 64 L2 64
0- for 0 <= t_skew_3_1 < 1619 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 64 | 0
					conv
Evaluation : 698.523987

{ conv[t4, t5, t6] -> conv[0, t4523 = 0, t_skew_3_1 = 3t4 + t5, t4525 = 0, xx_skew_outer, t4527 = 0, yy_outer, t4529 = 0, xx_skew_inner, t4520 = 0, yy_inner, t4531 = 0] : (t5 + xx_skew_inner) mod 2 = 0 and (-t6 + yy_inner) mod 64 = 0 and (2t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1619) {
    for (c3, max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 1)/96))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 31)/96)))) + 5)) - max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 1)/96)))))) + 1)) {
      for (c5, 0, 8) {
        for (c7, max(max(((c1 - (c3*64)) + -199), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0), ((min(min((c1 - (c3*64)), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1/3) + 1))))) + 341)), 63) - max(max(((c1 - (c3*64)) + -199), (((c1 - (c3*64)) - int32(floor_f32(float32(((c1 + 2)/3))))) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*128), 1)), ((min((c5*128), 1) - max((c5*128), 895)) + 1022)) {
            buf_output[(((c5*128) + c9) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*128) + c9) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*128) + c9) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*192) - (c1*2)) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 1
Tiling L1 64 L2 128
0- for 0 <= t_skew_3_1 < 1619 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 128 | 0
					conv
Evaluation : 650.307007

{ conv[t4, t5, t6] -> conv[0, t4586 = 0, t_skew_3_1 = 3t4 + t5, t4588 = 0, xx_skew_outer, t4590 = 0, yy_outer, t4592 = 0, xx_skew_inner, t4583 = 0, yy_inner, t4594 = 0] : (t5 + xx_skew_inner) mod 2 = 0 and (-t6 + yy_inner) mod 128 = 0 and (2t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64xx_skew_outer <= 2t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>

original list
595.075989+612.414978+590.935974+605.320984+614.880005+624.525024+747.395020+694.080017+652.744995+731.723022+698.523987+650.307007+611.153992+
remaining list
590.935974+595.075989+605.320984+611.153992+
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 2, 2640) {
    parallel (c3, max((int32(floor_f32(float32((c1/2)))) + -99), (int32(floor_f32(float32((c1/3)))) + 1)), ((min(int32(floor_f32(float32((c1/2)))), (int32(floor_f32(float32(((c1 + -1)/3)))) + 341)) - max((int32(floor_f32(float32((c1/2)))) + -99), (int32(floor_f32(float32((c1/3)))) + 1))) + 1)) {
      for (c5, 1, 1022) {
        buf_output[(c5 + int32((int64(((c3*3) - c1))*(int64)1024)))] = (((((((buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(((c3*3) - c1))*(int64)1024) + (int64)-1024)))] + buf_output[(c5 + int32(((int64(((c3*3) - c1))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(((c3*3) - c1))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32((int64(((c3*3) - c1))*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32((int64(((c3*3) - c1))*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(((c3*3) - c1))*(int64)1024) + (int64)1024)))]) + buf_output[(c5 + int32(((int64(((c3*3) - c1))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(((c3*3) - c1))*(int64)1024) + (int64)1024)))])
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Parallelize L1
0- for 0 <= t_skew_3_2 < 2640 | 0
	1- for 0 <= xx_skew < 78 | 0 | P
		2- for 1 <= yy < 1023 | 0
			conv
Evaluation : 191.964005

{ conv[t4, t5, t6] -> conv[t68 = 0, t69 = 0, t_skew_3_2 = 3t4 + 2t5, t71 = 0, xx_skew = t4 + t5, t73 = 0, yy = t6, t75 = 0] : 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 }


src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>

original list
191.964005+629.739990+
remaining list
191.964005+629.739990+ Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 83) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + 1)/2)))) + -4), int32(floor_f32(float32((c1/3))))), ((min(int32(floor_f32(float32((c1/2)))), (int32(floor_f32(float32(((c1 + 2)/3)))) + 10)) - max((int32(floor_f32(float32(((c1 + 1)/2)))) + -4), int32(floor_f32(float32((c1/3)))))) + 1)) {
      for (c5, max((2 - min((c1*32), 2)), (((c3*96) - (c1*32)) + -1022)), ((min(min((2641 - max((c1*32), 2610)), (((c3*96) - (c1*32)) + 92)), (((c3*64) - (c1*32)) + 261)) - max((2 - min((c1*32), 2)), (((c3*96) - (c1*32)) + -1022))) + 1)) {
        for (c7, max(max(((((c1*16) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*11) - (c3*32)) + int32(floor_f32(float32(((c5 - c1)/3))))) + 1)), 0), ((min(min((((c1*16) - (c3*32)) + int32(floor_f32(float32((c5/2))))), ((((c1*11) - (c3*32)) + int32(floor_f32(float32((((c5 - c1) + 83)/3))))) + 313)), 31) - max(max(((((c1*16) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*11) - (c3*32)) + int32(floor_f32(float32(((c5 - c1)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 32 L1 32
0- for 0 <= t_skew_3_2_outer < 82 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= t_skew_3_2_inner < 32 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 233.089005

{ conv[t4, t5, t6] -> conv[0, t4662 = 0, t_skew_3_2_outer, t4664 = 0, xx_skew_outer, t4666 = 0, t_skew_3_2_inner, t4659 = 0, xx_skew_inner, t4668 = 0, yy = t6, t4670 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + 2t5 <= 32t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and 0 <= t_skew_3_2_inner <= 31 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 32 L1 32 L2 32
0- for 0 <= t_skew_3_2_outer < 82 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_2_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t4739 = 0, t_skew_3_2_outer, t4741 = 0, xx_skew_outer, t4743 = 0, yy_outer, t4745 = 0, t_skew_3_2_inner, t4747 = 0, xx_skew_inner, t4736 = 0, yy_inner, t4749 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + 2t5 <= 32t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 32 L1 32 L2 64
0- for 0 <= t_skew_3_2_outer < 82 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_2_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t4782 = 0, t_skew_3_2_outer, t4784 = 0, xx_skew_outer, t4786 = 0, yy_outer, t4788 = 0, t_skew_3_2_inner, t4790 = 0, xx_skew_inner, t4779 = 0, yy_inner, t4792 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + 2t5 <= 32t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 32 L1 32 L2 128
0- for 0 <= t_skew_3_2_outer < 82 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_2_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t4821 = 0, t_skew_3_2_outer, t4823 = 0, xx_skew_outer, t4825 = 0, yy_outer, t4827 = 0, t_skew_3_2_inner, t4829 = 0, xx_skew_inner, t4818 = 0, yy_inner, t4831 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + 2t5 <= 32t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 83) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + 1)/4)))) + -2), int32(floor_f32(float32((c1/6))))), ((min(int32(floor_f32(float32((c1/4)))), (int32(floor_f32(float32(((c1 + 2)/6)))) + 5)) - max((int32(floor_f32(float32(((c1 + 1)/4)))) + -2), int32(floor_f32(float32((c1/6)))))) + 1)) {
      for (c5, max((2 - min((c1*32), 2)), (((c3*192) - (c1*32)) + -1022)), ((min(min((2641 - max((c1*32), 2610)), (((c3*192) - (c1*32)) + 188)), (((c3*128) - (c1*32)) + 325)) - max((2 - min((c1*32), 2)), (((c3*192) - (c1*32)) + -1022))) + 1)) {
        for (c7, max(max(((((c1*16) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*11) - (c3*64)) + int32(floor_f32(float32(((c5 - c1)/3))))) + 1)), 0), ((min(min((((c1*16) - (c3*64)) + int32(floor_f32(float32((c5/2))))), ((((c1*11) - (c3*64)) + int32(floor_f32(float32((((c5 - c1) + 83)/3))))) + 313)), 63) - max(max(((((c1*16) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*11) - (c3*64)) + int32(floor_f32(float32(((c5 - c1)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 32 L1 64
0- for 0 <= t_skew_3_2_outer < 82 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= t_skew_3_2_inner < 32 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 386.440002

{ conv[t4, t5, t6] -> conv[0, t4847 = 0, t_skew_3_2_outer, t4849 = 0, xx_skew_outer, t4851 = 0, t_skew_3_2_inner, t4844 = 0, xx_skew_inner, t4853 = 0, yy = t6, t4855 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + 2t5 <= 32t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and 0 <= t_skew_3_2_inner <= 31 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 32 L1 64 L2 32
0- for 0 <= t_skew_3_2_outer < 82 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_2_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t4921 = 0, t_skew_3_2_outer, t4923 = 0, xx_skew_outer, t4925 = 0, yy_outer, t4927 = 0, t_skew_3_2_inner, t4929 = 0, xx_skew_inner, t4918 = 0, yy_inner, t4931 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + 2t5 <= 32t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 32 L1 64 L2 64
0- for 0 <= t_skew_3_2_outer < 82 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_2_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t4964 = 0, t_skew_3_2_outer, t4966 = 0, xx_skew_outer, t4968 = 0, yy_outer, t4970 = 0, t_skew_3_2_inner, t4972 = 0, xx_skew_inner, t4961 = 0, yy_inner, t4974 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + 2t5 <= 32t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 32 L1 64 L2 128
0- for 0 <= t_skew_3_2_outer < 82 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_2_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t5003 = 0, t_skew_3_2_outer, t5005 = 0, xx_skew_outer, t5007 = 0, yy_outer, t5009 = 0, t_skew_3_2_inner, t5011 = 0, xx_skew_inner, t5000 = 0, yy_inner, t5013 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + 2t5 <= 32t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 42) {
    parallel (c3, max((c1 + -4), (c1 - int32(floor_f32(float32(((c1 + 2)/3)))))), ((min(c1, ((c1 - int32(floor_f32(float32(((c1 + 2)/3))))) + 11)) - max((c1 + -4), (c1 - int32(floor_f32(float32(((c1 + 2)/3))))))) + 1)) {
      for (c5, max((2 - min((c1*64), 2)), (((c3*96) - (c1*64)) + -1022)), ((min(min((2641 - max((c1*64), 2578)), (((c3*96) - (c1*64)) + 92)), (((c3 - c1)*64) + 261)) - max((2 - min((c1*64), 2)), (((c3*96) - (c1*64)) + -1022))) + 1)) {
        for (c7, max(max(((((c1 - c3)*32) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*21) - (c3*32)) + int32(floor_f32(float32(((c1 + c5)/3))))) + 1)), 0), ((min(min((((c1 - c3)*32) + int32(floor_f32(float32((c5/2))))), ((((c1*21) - (c3*32)) + int32(floor_f32(float32((((c1 + c5) + -1)/3))))) + 341)), 31) - max(max(((((c1 - c3)*32) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*21) - (c3*32)) + int32(floor_f32(float32(((c1 + c5)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 64 L1 32
0- for 0 <= t_skew_3_2_outer < 41 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= t_skew_3_2_inner < 64 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 229.593994

{ conv[t4, t5, t6] -> conv[0, t5029 = 0, t_skew_3_2_outer, t5031 = 0, xx_skew_outer, t5033 = 0, t_skew_3_2_inner, t5026 = 0, xx_skew_inner, t5035 = 0, yy = t6, t5037 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + 2t5 <= 64t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and 0 <= t_skew_3_2_inner <= 63 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 64 L1 32 L2 32
0- for 0 <= t_skew_3_2_outer < 41 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_2_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t5103 = 0, t_skew_3_2_outer, t5105 = 0, xx_skew_outer, t5107 = 0, yy_outer, t5109 = 0, t_skew_3_2_inner, t5111 = 0, xx_skew_inner, t5100 = 0, yy_inner, t5113 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + 2t5 <= 64t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 64 L1 32 L2 64
0- for 0 <= t_skew_3_2_outer < 41 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_2_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t5146 = 0, t_skew_3_2_outer, t5148 = 0, xx_skew_outer, t5150 = 0, yy_outer, t5152 = 0, t_skew_3_2_inner, t5154 = 0, xx_skew_inner, t5143 = 0, yy_inner, t5156 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + 2t5 <= 64t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 64 L1 32 L2 128
0- for 0 <= t_skew_3_2_outer < 41 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_2_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t5185 = 0, t_skew_3_2_outer, t5187 = 0, xx_skew_outer, t5189 = 0, yy_outer, t5191 = 0, t_skew_3_2_inner, t5193 = 0, xx_skew_inner, t5182 = 0, yy_inner, t5195 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + 2t5 <= 64t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 42) {
    parallel (c3, max((int32(floor_f32(float32((c1/2)))) + -2), int32(floor_f32(float32((c1/3))))), ((min(int32(floor_f32(float32((c1/2)))), (int32(floor_f32(float32(((c1 + 1)/3)))) + 5)) - max((int32(floor_f32(float32((c1/2)))) + -2), int32(floor_f32(float32((c1/3)))))) + 1)) {
      for (c5, max((2 - min((c1*64), 2)), (((c3*192) - (c1*64)) + -1022)), ((min(min((2641 - max((c1*64), 2578)), (((c3*192) - (c1*64)) + 188)), (((c3*128) - (c1*64)) + 325)) - max((2 - min((c1*64), 2)), (((c3*192) - (c1*64)) + -1022))) + 1)) {
        for (c7, max(max(((((c1*32) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*21) - (c3*64)) + int32(floor_f32(float32(((c1 + c5)/3))))) + 1)), 0), ((min(min((((c1*32) - (c3*64)) + int32(floor_f32(float32((c5/2))))), ((((c1*21) - (c3*64)) + int32(floor_f32(float32((((c1 + c5) + -1)/3))))) + 341)), 63) - max(max(((((c1*32) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*21) - (c3*64)) + int32(floor_f32(float32(((c1 + c5)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 64 L1 64
0- for 0 <= t_skew_3_2_outer < 41 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= t_skew_3_2_inner < 64 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 368.270996

{ conv[t4, t5, t6] -> conv[0, t5211 = 0, t_skew_3_2_outer, t5213 = 0, xx_skew_outer, t5215 = 0, t_skew_3_2_inner, t5208 = 0, xx_skew_inner, t5217 = 0, yy = t6, t5219 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 64 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + 2t5 <= 64t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and 0 <= t_skew_3_2_inner <= 63 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 64 L1 64 L2 32
0- for 0 <= t_skew_3_2_outer < 41 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_2_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t5285 = 0, t_skew_3_2_outer, t5287 = 0, xx_skew_outer, t5289 = 0, yy_outer, t5291 = 0, t_skew_3_2_inner, t5293 = 0, xx_skew_inner, t5282 = 0, yy_inner, t5295 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + 2t5 <= 64t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 64 L1 64 L2 64
0- for 0 <= t_skew_3_2_outer < 41 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_2_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t5328 = 0, t_skew_3_2_outer, t5330 = 0, xx_skew_outer, t5332 = 0, yy_outer, t5334 = 0, t_skew_3_2_inner, t5336 = 0, xx_skew_inner, t5325 = 0, yy_inner, t5338 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + 2t5 <= 64t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 64 L1 64 L2 128
0- for 0 <= t_skew_3_2_outer < 41 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_2_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t5367 = 0, t_skew_3_2_outer, t5369 = 0, xx_skew_outer, t5371 = 0, yy_outer, t5373 = 0, t_skew_3_2_inner, t5375 = 0, xx_skew_inner, t5364 = 0, yy_inner, t5377 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + 2t5 <= 64t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 21) {
    parallel (c3, max(((c1*2) + -4), (c1 + int32(floor_f32(float32((c1/3)))))), ((min(((c1*2) + 1), ((c1 + int32(floor_f32(float32(((c1 + 2)/3))))) + 11)) - max(((c1*2) + -4), (c1 + int32(floor_f32(float32((c1/3))))))) + 1)) {
      for (c5, max(max((2 - min((c1*128), 2)), (((c3*96) - (c1*128)) + -1022)), ((c3*64) - (c1*128))), ((min(min((2641 - max((c1*128), 2514)), (((c3*96) - (c1*128)) + 92)), (((c3*64) - (c1*128)) + 261)) - max(max((2 - min((c1*128), 2)), (((c3*96) - (c1*128)) + -1022)), ((c3*64) - (c1*128)))) + 1)) {
        for (c7, max(max(((((c1*64) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*43) - (c3*32)) + int32(floor_f32(float32(((c5 - c1)/3))))) + 1)), 0), ((min(min((((c1*64) - (c3*32)) + int32(floor_f32(float32((c5/2))))), ((((c1*43) - (c3*32)) + int32(floor_f32(float32((((c5 - c1) + 20)/3))))) + 334)), 31) - max(max(((((c1*64) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*43) - (c3*32)) + int32(floor_f32(float32(((c5 - c1)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 128 L1 32
0- for 0 <= t_skew_3_2_outer < 20 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= t_skew_3_2_inner < 128 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 219.565994

{ conv[t4, t5, t6] -> conv[0, t5393 = 0, t_skew_3_2_outer, t5395 = 0, xx_skew_outer, t5397 = 0, t_skew_3_2_inner, t5390 = 0, xx_skew_inner, t5399 = 0, yy = t6, t5401 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (t4 + 2t5 + t_skew_3_2_inner - 4xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + 2t5 <= 128t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and 0 <= t_skew_3_2_inner <= 127 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 128 L1 32 L2 32
0- for 0 <= t_skew_3_2_outer < 20 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_2_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t5467 = 0, t_skew_3_2_outer, t5469 = 0, xx_skew_outer, t5471 = 0, yy_outer, t5473 = 0, t_skew_3_2_inner, t5475 = 0, xx_skew_inner, t5464 = 0, yy_inner, t5477 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 + 2t5 + t_skew_3_2_inner - 4xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + 2t5 <= 128t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 128 L1 32 L2 64
0- for 0 <= t_skew_3_2_outer < 20 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_2_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t5510 = 0, t_skew_3_2_outer, t5512 = 0, xx_skew_outer, t5514 = 0, yy_outer, t5516 = 0, t_skew_3_2_inner, t5518 = 0, xx_skew_inner, t5507 = 0, yy_inner, t5520 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 + 2t5 + t_skew_3_2_inner - 4xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + 2t5 <= 128t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 128 L1 32 L2 128
0- for 0 <= t_skew_3_2_outer < 20 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_2_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t5549 = 0, t_skew_3_2_outer, t5551 = 0, xx_skew_outer, t5553 = 0, yy_outer, t5555 = 0, t_skew_3_2_inner, t5557 = 0, xx_skew_inner, t5546 = 0, yy_inner, t5559 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 + 2t5 + t_skew_3_2_inner - 4xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + 2t5 <= 128t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 21) {
    parallel (c3, max((c1 + -2), (c1 - int32(floor_f32(float32(((c1 + 2)/3)))))), ((min(c1, ((c1 - int32(floor_f32(float32(((c1/3) + 1))))) + 6)) - max((c1 + -2), (c1 - int32(floor_f32(float32(((c1 + 2)/3))))))) + 1)) {
      for (c5, max((2 - min((c1*128), 2)), (((c3*192) - (c1*128)) + -1022)), ((min(min((2641 - max((c1*128), 2514)), (((c3*192) - (c1*128)) + 188)), (((c3 - c1)*128) + 325)) - max((2 - min((c1*128), 2)), (((c3*192) - (c1*128)) + -1022))) + 1)) {
        for (c7, max(max(((((c1 - c3)*64) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*43) - (c3*64)) + int32(floor_f32(float32(((c5 - c1)/3))))) + 1)), 0), ((min(min((((c1 - c3)*64) + int32(floor_f32(float32((c5/2))))), ((((c1*43) - (c3*64)) + int32(floor_f32(float32((((c5 - c1) + 20)/3))))) + 334)), 63) - max(max(((((c1 - c3)*64) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*43) - (c3*64)) + int32(floor_f32(float32(((c5 - c1)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 128 L1 64
0- for 0 <= t_skew_3_2_outer < 20 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= t_skew_3_2_inner < 128 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 357.791992

{ conv[t4, t5, t6] -> conv[0, t5575 = 0, t_skew_3_2_outer, t5577 = 0, xx_skew_outer, t5579 = 0, t_skew_3_2_inner, t5572 = 0, xx_skew_inner, t5581 = 0, yy = t6, t5583 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 64 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + 2t5 <= 128t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and 0 <= t_skew_3_2_inner <= 127 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 128 L1 64 L2 32
0- for 0 <= t_skew_3_2_outer < 20 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_2_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t5649 = 0, t_skew_3_2_outer, t5651 = 0, xx_skew_outer, t5653 = 0, yy_outer, t5655 = 0, t_skew_3_2_inner, t5657 = 0, xx_skew_inner, t5646 = 0, yy_inner, t5659 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + 2t5 <= 128t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 128 L1 64 L2 64
0- for 0 <= t_skew_3_2_outer < 20 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_2_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t5692 = 0, t_skew_3_2_outer, t5694 = 0, xx_skew_outer, t5696 = 0, yy_outer, t5698 = 0, t_skew_3_2_inner, t5700 = 0, xx_skew_inner, t5689 = 0, yy_inner, t5702 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + 2t5 <= 128t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L0 128 L1 64 L2 128
0- for 0 <= t_skew_3_2_outer < 20 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_2_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t5731 = 0, t_skew_3_2_outer, t5733 = 0, xx_skew_outer, t5735 = 0, yy_outer, t5737 = 0, t_skew_3_2_inner, t5739 = 0, xx_skew_inner, t5728 = 0, yy_inner, t5741 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + 2t5 <= 128t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 2, 2640) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + -6)/64)))) + -3), int32(floor_f32(float32(((c1 + 3)/96))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 62)/96)))) + 10)) - max((int32(floor_f32(float32(((c1 + -6)/64)))) + -3), int32(floor_f32(float32(((c1 + 3)/96)))))) + 1)) {
      for (c5, 0, 32) {
        for (c7, max(max(((int32(floor_f32(float32((c1/2)))) - (c3*32)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*32)) + 1)), 0), ((min(min((int32(floor_f32(float32((c1/2)))) - (c3*32)), ((int32(floor_f32(float32(((c1 + -1)/3)))) - (c3*32)) + 341)), 31) - max(max(((int32(floor_f32(float32((c1/2)))) - (c3*32)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*32)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*32), 1)), ((min((c5*32), 1) - max((c5*32), 991)) + 1022)) {
            buf_output[(((c5*32) + c9) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*32) + c9) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*32) + c9) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L1 32 L2 32
0- for 0 <= t_skew_3_2 < 2640 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 32 | 0
					conv
Evaluation : 357.891998

{ conv[t4, t5, t6] -> conv[0, t5757 = 0, t_skew_3_2 = 3t4 + 2t5, t5759 = 0, xx_skew_outer, t5761 = 0, yy_outer, t5763 = 0, xx_skew_inner, t5754 = 0, yy_inner, t5765 = 0] : (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 2, 2640) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + -6)/64)))) + -3), int32(floor_f32(float32(((c1 + 3)/96))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 62)/96)))) + 10)) - max((int32(floor_f32(float32(((c1 + -6)/64)))) + -3), int32(floor_f32(float32(((c1 + 3)/96)))))) + 1)) {
      for (c5, 0, 16) {
        for (c7, max(max(((int32(floor_f32(float32((c1/2)))) - (c3*32)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*32)) + 1)), 0), ((min(min((int32(floor_f32(float32((c1/2)))) - (c3*32)), ((int32(floor_f32(float32(((c1 + -1)/3)))) - (c3*32)) + 341)), 31) - max(max(((int32(floor_f32(float32((c1/2)))) - (c3*32)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*32)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*64), 1)), ((min((c5*64), 1) - max((c5*64), 959)) + 1022)) {
            buf_output[(((c5*64) + c9) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*64) + c9) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*64) + c9) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L1 32 L2 64
0- for 0 <= t_skew_3_2 < 2640 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 64 | 0
					conv
Evaluation : 329.911011

{ conv[t4, t5, t6] -> conv[0, t5818 = 0, t_skew_3_2 = 3t4 + 2t5, t5820 = 0, xx_skew_outer, t5822 = 0, yy_outer, t5824 = 0, xx_skew_inner, t5815 = 0, yy_inner, t5826 = 0] : (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 2, 2640) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + -6)/64)))) + -3), int32(floor_f32(float32(((c1 + 3)/96))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 62)/96)))) + 10)) - max((int32(floor_f32(float32(((c1 + -6)/64)))) + -3), int32(floor_f32(float32(((c1 + 3)/96)))))) + 1)) {
      for (c5, 0, 8) {
        for (c7, max(max(((int32(floor_f32(float32((c1/2)))) - (c3*32)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*32)) + 1)), 0), ((min(min((int32(floor_f32(float32((c1/2)))) - (c3*32)), ((int32(floor_f32(float32(((c1 + -1)/3)))) - (c3*32)) + 341)), 31) - max(max(((int32(floor_f32(float32((c1/2)))) - (c3*32)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*32)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*128), 1)), ((min((c5*128), 1) - max((c5*128), 895)) + 1022)) {
            buf_output[(((c5*128) + c9) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*128) + c9) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*128) + c9) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L1 32 L2 128
0- for 0 <= t_skew_3_2 < 2640 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 128 | 0
					conv
Evaluation : 302.269012

{ conv[t4, t5, t6] -> conv[0, t5882 = 0, t_skew_3_2 = 3t4 + 2t5, t5884 = 0, xx_skew_outer, t5886 = 0, yy_outer, t5888 = 0, xx_skew_inner, t5879 = 0, yy_inner, t5890 = 0] : (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 2, 2640) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + 58)/128)))) + -2), int32(floor_f32(float32(((c1 + 3)/192))))), ((min(int32(floor_f32(float32((c1/128)))), (int32(floor_f32(float32(((c1 + 62)/192)))) + 5)) - max((int32(floor_f32(float32(((c1 + 58)/128)))) + -2), int32(floor_f32(float32(((c1 + 3)/192)))))) + 1)) {
      for (c5, 0, 32) {
        for (c7, max(max(((int32(floor_f32(float32((c1/2)))) - (c3*64)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*64)) + 1)), 0), ((min(min((int32(floor_f32(float32((c1/2)))) - (c3*64)), ((int32(floor_f32(float32(((c1 + -1)/3)))) - (c3*64)) + 341)), 63) - max(max(((int32(floor_f32(float32((c1/2)))) - (c3*64)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*64)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*32), 1)), ((min((c5*32), 1) - max((c5*32), 991)) + 1022)) {
            buf_output[(((c5*32) + c9) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*32) + c9) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*32) + c9) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L1 64 L2 32
0- for 0 <= t_skew_3_2 < 2640 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 32 | 0
					conv
Evaluation : 534.918030

{ conv[t4, t5, t6] -> conv[0, t5946 = 0, t_skew_3_2 = 3t4 + 2t5, t5948 = 0, xx_skew_outer, t5950 = 0, yy_outer, t5952 = 0, xx_skew_inner, t5943 = 0, yy_inner, t5954 = 0] : (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 2, 2640) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + 58)/128)))) + -2), int32(floor_f32(float32(((c1 + 3)/192))))), ((min(int32(floor_f32(float32((c1/128)))), (int32(floor_f32(float32(((c1 + 62)/192)))) + 5)) - max((int32(floor_f32(float32(((c1 + 58)/128)))) + -2), int32(floor_f32(float32(((c1 + 3)/192)))))) + 1)) {
      for (c5, 0, 16) {
        for (c7, max(max(((int32(floor_f32(float32((c1/2)))) - (c3*64)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*64)) + 1)), 0), ((min(min((int32(floor_f32(float32((c1/2)))) - (c3*64)), ((int32(floor_f32(float32(((c1 + -1)/3)))) - (c3*64)) + 341)), 63) - max(max(((int32(floor_f32(float32((c1/2)))) - (c3*64)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*64)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*64), 1)), ((min((c5*64), 1) - max((c5*64), 959)) + 1022)) {
            buf_output[(((c5*64) + c9) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*64) + c9) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*64) + c9) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L1 64 L2 64
0- for 0 <= t_skew_3_2 < 2640 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 64 | 0
					conv
Evaluation : 517.395020

{ conv[t4, t5, t6] -> conv[0, t6010 = 0, t_skew_3_2 = 3t4 + 2t5, t6012 = 0, xx_skew_outer, t6014 = 0, yy_outer, t6016 = 0, xx_skew_inner, t6007 = 0, yy_inner, t6018 = 0] : (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 2, 2640) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + 58)/128)))) + -2), int32(floor_f32(float32(((c1 + 3)/192))))), ((min(int32(floor_f32(float32((c1/128)))), (int32(floor_f32(float32(((c1 + 62)/192)))) + 5)) - max((int32(floor_f32(float32(((c1 + 58)/128)))) + -2), int32(floor_f32(float32(((c1 + 3)/192)))))) + 1)) {
      for (c5, 0, 8) {
        for (c7, max(max(((int32(floor_f32(float32((c1/2)))) - (c3*64)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*64)) + 1)), 0), ((min(min((int32(floor_f32(float32((c1/2)))) - (c3*64)), ((int32(floor_f32(float32(((c1 + -1)/3)))) - (c3*64)) + 341)), 63) - max(max(((int32(floor_f32(float32((c1/2)))) - (c3*64)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*64)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*128), 1)), ((min((c5*128), 1) - max((c5*128), 895)) + 1022)) {
            buf_output[(((c5*128) + c9) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*128) + c9) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*128) + c9) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Parallelize L1
Tiling L1 64 L2 128
0- for 0 <= t_skew_3_2 < 2640 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 128 | 0
					conv
Evaluation : 491.263000

{ conv[t4, t5, t6] -> conv[0, t6074 = 0, t_skew_3_2 = 3t4 + 2t5, t6076 = 0, xx_skew_outer, t6078 = 0, yy_outer, t6080 = 0, xx_skew_inner, t6071 = 0, yy_inner, t6082 = 0] : (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>

original list
233.089005+386.440002+229.593994+368.270996+219.565994+357.791992+357.891998+329.911011+302.269012+534.918030+517.395020+491.263000+191.964005+
remaining list
191.964005+219.565994+229.593994+233.089005+ Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 83) {
    for (c3, max((int32(floor_f32(float32(((c1 + 1)/2)))) + -4), int32(floor_f32(float32((c1/3))))), ((min(int32(floor_f32(float32((c1/2)))), (int32(floor_f32(float32(((c1 + 2)/3)))) + 10)) - max((int32(floor_f32(float32(((c1 + 1)/2)))) + -4), int32(floor_f32(float32((c1/3)))))) + 1)) {
      for (c5, max((2 - min((c1*32), 2)), (((c3*96) - (c1*32)) + -1022)), ((min(min((2641 - max((c1*32), 2610)), (((c3*96) - (c1*32)) + 92)), (((c3*64) - (c1*32)) + 261)) - max((2 - min((c1*32), 2)), (((c3*96) - (c1*32)) + -1022))) + 1)) {
        for (c7, max(max(((((c1*16) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*11) - (c3*32)) + int32(floor_f32(float32(((c5 - c1)/3))))) + 1)), 0), ((min(min((((c1*16) - (c3*32)) + int32(floor_f32(float32((c5/2))))), ((((c1*11) - (c3*32)) + int32(floor_f32(float32((((c5 - c1) + 83)/3))))) + 313)), 31) - max(max(((((c1*16) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*11) - (c3*32)) + int32(floor_f32(float32(((c5 - c1)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Tiling L0 32 L1 32
0- for 0 <= t_skew_3_2_outer < 82 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= t_skew_3_2_inner < 32 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 586.726990

{ conv[t4, t5, t6] -> conv[0, t6138 = 0, t_skew_3_2_outer, t6140 = 0, xx_skew_outer, t6142 = 0, t_skew_3_2_inner, t6135 = 0, xx_skew_inner, t6144 = 0, yy = t6, t6146 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + 2t5 <= 32t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and 0 <= t_skew_3_2_inner <= 31 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 32 L1 32 L2 32
0- for 0 <= t_skew_3_2_outer < 82 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_2_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t6214 = 0, t_skew_3_2_outer, t6216 = 0, xx_skew_outer, t6218 = 0, yy_outer, t6220 = 0, t_skew_3_2_inner, t6222 = 0, xx_skew_inner, t6211 = 0, yy_inner, t6224 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + 2t5 <= 32t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 32 L1 32 L2 64
0- for 0 <= t_skew_3_2_outer < 82 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_2_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t6257 = 0, t_skew_3_2_outer, t6259 = 0, xx_skew_outer, t6261 = 0, yy_outer, t6263 = 0, t_skew_3_2_inner, t6265 = 0, xx_skew_inner, t6254 = 0, yy_inner, t6267 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + 2t5 <= 32t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 32 L1 32 L2 128
0- for 0 <= t_skew_3_2_outer < 82 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_2_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t6296 = 0, t_skew_3_2_outer, t6298 = 0, xx_skew_outer, t6300 = 0, yy_outer, t6302 = 0, t_skew_3_2_inner, t6304 = 0, xx_skew_inner, t6293 = 0, yy_inner, t6306 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + 2t5 <= 32t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 83) {
    for (c3, max((int32(floor_f32(float32(((c1 + 1)/4)))) + -2), int32(floor_f32(float32((c1/6))))), ((min(int32(floor_f32(float32((c1/4)))), (int32(floor_f32(float32(((c1 + 2)/6)))) + 5)) - max((int32(floor_f32(float32(((c1 + 1)/4)))) + -2), int32(floor_f32(float32((c1/6)))))) + 1)) {
      for (c5, max((2 - min((c1*32), 2)), (((c3*192) - (c1*32)) + -1022)), ((min(min((2641 - max((c1*32), 2610)), (((c3*192) - (c1*32)) + 188)), (((c3*128) - (c1*32)) + 325)) - max((2 - min((c1*32), 2)), (((c3*192) - (c1*32)) + -1022))) + 1)) {
        for (c7, max(max(((((c1*16) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*11) - (c3*64)) + int32(floor_f32(float32(((c5 - c1)/3))))) + 1)), 0), ((min(min((((c1*16) - (c3*64)) + int32(floor_f32(float32((c5/2))))), ((((c1*11) - (c3*64)) + int32(floor_f32(float32((((c5 - c1) + 83)/3))))) + 313)), 63) - max(max(((((c1*16) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*11) - (c3*64)) + int32(floor_f32(float32(((c5 - c1)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*32)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Tiling L0 32 L1 64
0- for 0 <= t_skew_3_2_outer < 82 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= t_skew_3_2_inner < 32 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 583.931030

{ conv[t4, t5, t6] -> conv[0, t6322 = 0, t_skew_3_2_outer, t6324 = 0, xx_skew_outer, t6326 = 0, t_skew_3_2_inner, t6319 = 0, xx_skew_inner, t6328 = 0, yy = t6, t6330 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + 2t5 <= 32t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and 0 <= t_skew_3_2_inner <= 31 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 32 L1 64 L2 32
0- for 0 <= t_skew_3_2_outer < 82 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_2_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t6395 = 0, t_skew_3_2_outer, t6397 = 0, xx_skew_outer, t6399 = 0, yy_outer, t6401 = 0, t_skew_3_2_inner, t6403 = 0, xx_skew_inner, t6392 = 0, yy_inner, t6405 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + 2t5 <= 32t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 32 L1 64 L2 64
0- for 0 <= t_skew_3_2_outer < 82 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_2_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t6438 = 0, t_skew_3_2_outer, t6440 = 0, xx_skew_outer, t6442 = 0, yy_outer, t6444 = 0, t_skew_3_2_inner, t6446 = 0, xx_skew_inner, t6435 = 0, yy_inner, t6448 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + 2t5 <= 32t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 32 L1 64 L2 128
0- for 0 <= t_skew_3_2_outer < 82 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_2_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t6477 = 0, t_skew_3_2_outer, t6479 = 0, xx_skew_outer, t6481 = 0, yy_outer, t6483 = 0, t_skew_3_2_inner, t6485 = 0, xx_skew_inner, t6474 = 0, yy_inner, t6487 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 3t4 + 2t5 <= 32t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 42) {
    for (c3, max((c1 + -4), (c1 - int32(floor_f32(float32(((c1 + 2)/3)))))), ((min(c1, ((c1 - int32(floor_f32(float32(((c1 + 2)/3))))) + 11)) - max((c1 + -4), (c1 - int32(floor_f32(float32(((c1 + 2)/3))))))) + 1)) {
      for (c5, max((2 - min((c1*64), 2)), (((c3*96) - (c1*64)) + -1022)), ((min(min((2641 - max((c1*64), 2578)), (((c3*96) - (c1*64)) + 92)), (((c3 - c1)*64) + 261)) - max((2 - min((c1*64), 2)), (((c3*96) - (c1*64)) + -1022))) + 1)) {
        for (c7, max(max(((((c1 - c3)*32) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*21) - (c3*32)) + int32(floor_f32(float32(((c1 + c5)/3))))) + 1)), 0), ((min(min((((c1 - c3)*32) + int32(floor_f32(float32((c5/2))))), ((((c1*21) - (c3*32)) + int32(floor_f32(float32((((c1 + c5) + -1)/3))))) + 341)), 31) - max(max(((((c1 - c3)*32) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*21) - (c3*32)) + int32(floor_f32(float32(((c1 + c5)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Tiling L0 64 L1 32
0- for 0 <= t_skew_3_2_outer < 41 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= t_skew_3_2_inner < 64 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 577.590027

{ conv[t4, t5, t6] -> conv[0, t6503 = 0, t_skew_3_2_outer, t6505 = 0, xx_skew_outer, t6507 = 0, t_skew_3_2_inner, t6500 = 0, xx_skew_inner, t6509 = 0, yy = t6, t6511 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + 2t5 <= 64t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and 0 <= t_skew_3_2_inner <= 63 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 64 L1 32 L2 32
0- for 0 <= t_skew_3_2_outer < 41 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_2_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t6576 = 0, t_skew_3_2_outer, t6578 = 0, xx_skew_outer, t6580 = 0, yy_outer, t6582 = 0, t_skew_3_2_inner, t6584 = 0, xx_skew_inner, t6573 = 0, yy_inner, t6586 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + 2t5 <= 64t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 64 L1 32 L2 64
0- for 0 <= t_skew_3_2_outer < 41 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_2_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t6619 = 0, t_skew_3_2_outer, t6621 = 0, xx_skew_outer, t6623 = 0, yy_outer, t6625 = 0, t_skew_3_2_inner, t6627 = 0, xx_skew_inner, t6616 = 0, yy_inner, t6629 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + 2t5 <= 64t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 64 L1 32 L2 128
0- for 0 <= t_skew_3_2_outer < 41 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_2_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t6658 = 0, t_skew_3_2_outer, t6660 = 0, xx_skew_outer, t6662 = 0, yy_outer, t6664 = 0, t_skew_3_2_inner, t6666 = 0, xx_skew_inner, t6655 = 0, yy_inner, t6668 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + 2t5 <= 64t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 42) {
    for (c3, max((int32(floor_f32(float32((c1/2)))) + -2), int32(floor_f32(float32((c1/3))))), ((min(int32(floor_f32(float32((c1/2)))), (int32(floor_f32(float32(((c1 + 1)/3)))) + 5)) - max((int32(floor_f32(float32((c1/2)))) + -2), int32(floor_f32(float32((c1/3)))))) + 1)) {
      for (c5, max((2 - min((c1*64), 2)), (((c3*192) - (c1*64)) + -1022)), ((min(min((2641 - max((c1*64), 2578)), (((c3*192) - (c1*64)) + 188)), (((c3*128) - (c1*64)) + 325)) - max((2 - min((c1*64), 2)), (((c3*192) - (c1*64)) + -1022))) + 1)) {
        for (c7, max(max(((((c1*32) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*21) - (c3*64)) + int32(floor_f32(float32(((c1 + c5)/3))))) + 1)), 0), ((min(min((((c1*32) - (c3*64)) + int32(floor_f32(float32((c5/2))))), ((((c1*21) - (c3*64)) + int32(floor_f32(float32((((c1 + c5) + -1)/3))))) + 341)), 63) - max(max(((((c1*32) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*21) - (c3*64)) + int32(floor_f32(float32(((c1 + c5)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*64)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Tiling L0 64 L1 64
0- for 0 <= t_skew_3_2_outer < 41 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= t_skew_3_2_inner < 64 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 576.651001

{ conv[t4, t5, t6] -> conv[0, t6684 = 0, t_skew_3_2_outer, t6686 = 0, xx_skew_outer, t6688 = 0, t_skew_3_2_inner, t6681 = 0, xx_skew_inner, t6690 = 0, yy = t6, t6692 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 64 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + 2t5 <= 64t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and 0 <= t_skew_3_2_inner <= 63 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 64 L1 64 L2 32
0- for 0 <= t_skew_3_2_outer < 41 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_2_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t6757 = 0, t_skew_3_2_outer, t6759 = 0, xx_skew_outer, t6761 = 0, yy_outer, t6763 = 0, t_skew_3_2_inner, t6765 = 0, xx_skew_inner, t6754 = 0, yy_inner, t6767 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + 2t5 <= 64t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 64 L1 64 L2 64
0- for 0 <= t_skew_3_2_outer < 41 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_2_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t6800 = 0, t_skew_3_2_outer, t6802 = 0, xx_skew_outer, t6804 = 0, yy_outer, t6806 = 0, t_skew_3_2_inner, t6808 = 0, xx_skew_inner, t6797 = 0, yy_inner, t6810 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + 2t5 <= 64t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 64 L1 64 L2 128
0- for 0 <= t_skew_3_2_outer < 41 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_2_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t6839 = 0, t_skew_3_2_outer, t6841 = 0, xx_skew_outer, t6843 = 0, yy_outer, t6845 = 0, t_skew_3_2_inner, t6847 = 0, xx_skew_inner, t6836 = 0, yy_inner, t6849 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 3t4 + 2t5 <= 64t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 21) {
    for (c3, max(((c1*2) + -4), (c1 + int32(floor_f32(float32((c1/3)))))), ((min(((c1*2) + 1), ((c1 + int32(floor_f32(float32(((c1 + 2)/3))))) + 11)) - max(((c1*2) + -4), (c1 + int32(floor_f32(float32((c1/3))))))) + 1)) {
      for (c5, max(max((2 - min((c1*128), 2)), (((c3*96) - (c1*128)) + -1022)), ((c3*64) - (c1*128))), ((min(min((2641 - max((c1*128), 2514)), (((c3*96) - (c1*128)) + 92)), (((c3*64) - (c1*128)) + 261)) - max(max((2 - min((c1*128), 2)), (((c3*96) - (c1*128)) + -1022)), ((c3*64) - (c1*128)))) + 1)) {
        for (c7, max(max(((((c1*64) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*43) - (c3*32)) + int32(floor_f32(float32(((c5 - c1)/3))))) + 1)), 0), ((min(min((((c1*64) - (c3*32)) + int32(floor_f32(float32((c5/2))))), ((((c1*43) - (c3*32)) + int32(floor_f32(float32((((c5 - c1) + 20)/3))))) + 334)), 31) - max(max(((((c1*64) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*43) - (c3*32)) + int32(floor_f32(float32(((c5 - c1)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*96) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Tiling L0 128 L1 32
0- for 0 <= t_skew_3_2_outer < 20 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= t_skew_3_2_inner < 128 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 575.572998

{ conv[t4, t5, t6] -> conv[0, t6865 = 0, t_skew_3_2_outer, t6867 = 0, xx_skew_outer, t6869 = 0, t_skew_3_2_inner, t6862 = 0, xx_skew_inner, t6871 = 0, yy = t6, t6873 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (t4 + 2t5 + t_skew_3_2_inner - 4xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + 2t5 <= 128t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and 0 <= t_skew_3_2_inner <= 127 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 128 L1 32 L2 32
0- for 0 <= t_skew_3_2_outer < 20 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_2_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t6938 = 0, t_skew_3_2_outer, t6940 = 0, xx_skew_outer, t6942 = 0, yy_outer, t6944 = 0, t_skew_3_2_inner, t6946 = 0, xx_skew_inner, t6935 = 0, yy_inner, t6948 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 + 2t5 + t_skew_3_2_inner - 4xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + 2t5 <= 128t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 128 L1 32 L2 64
0- for 0 <= t_skew_3_2_outer < 20 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_2_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t6981 = 0, t_skew_3_2_outer, t6983 = 0, xx_skew_outer, t6985 = 0, yy_outer, t6987 = 0, t_skew_3_2_inner, t6989 = 0, xx_skew_inner, t6978 = 0, yy_inner, t6991 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 + 2t5 + t_skew_3_2_inner - 4xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + 2t5 <= 128t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 128 L1 32 L2 128
0- for 0 <= t_skew_3_2_outer < 20 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_2_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t7020 = 0, t_skew_3_2_outer, t7022 = 0, xx_skew_outer, t7024 = 0, yy_outer, t7026 = 0, t_skew_3_2_inner, t7028 = 0, xx_skew_inner, t7017 = 0, yy_inner, t7030 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 + 2t5 + t_skew_3_2_inner - 4xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + 2t5 <= 128t_skew_3_2_outer <= 3t4 + 2t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 21) {
    for (c3, max((c1 + -2), (c1 - int32(floor_f32(float32(((c1 + 2)/3)))))), ((min(c1, ((c1 - int32(floor_f32(float32(((c1/3) + 1))))) + 6)) - max((c1 + -2), (c1 - int32(floor_f32(float32(((c1 + 2)/3))))))) + 1)) {
      for (c5, max((2 - min((c1*128), 2)), (((c3*192) - (c1*128)) + -1022)), ((min(min((2641 - max((c1*128), 2514)), (((c3*192) - (c1*128)) + 188)), (((c3 - c1)*128) + 325)) - max((2 - min((c1*128), 2)), (((c3*192) - (c1*128)) + -1022))) + 1)) {
        for (c7, max(max(((((c1 - c3)*64) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*43) - (c3*64)) + int32(floor_f32(float32(((c5 - c1)/3))))) + 1)), 0), ((min(min((((c1 - c3)*64) + int32(floor_f32(float32((c5/2))))), ((((c1*43) - (c3*64)) + int32(floor_f32(float32((((c5 - c1) + 20)/3))))) + 334)), 63) - max(max(((((c1 - c3)*64) + int32(floor_f32(float32((c5/2))))) + -99), ((((c1*43) - (c3*64)) + int32(floor_f32(float32(((c5 - c1)/3))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*192) - (c1*128)) - c5) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Tiling L0 128 L1 64
0- for 0 <= t_skew_3_2_outer < 20 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= t_skew_3_2_inner < 128 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 578.776001

{ conv[t4, t5, t6] -> conv[0, t7046 = 0, t_skew_3_2_outer, t7048 = 0, xx_skew_outer, t7050 = 0, t_skew_3_2_inner, t7043 = 0, xx_skew_inner, t7052 = 0, yy = t6, t7054 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 64 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + 2t5 <= 128t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and 0 <= t_skew_3_2_inner <= 127 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 128 L1 64 L2 32
0- for 0 <= t_skew_3_2_outer < 20 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_3_2_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t7119 = 0, t_skew_3_2_outer, t7121 = 0, xx_skew_outer, t7123 = 0, yy_outer, t7125 = 0, t_skew_3_2_inner, t7127 = 0, xx_skew_inner, t7116 = 0, yy_inner, t7129 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + 2t5 <= 128t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 128 L1 64 L2 64
0- for 0 <= t_skew_3_2_outer < 20 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_3_2_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t7162 = 0, t_skew_3_2_outer, t7164 = 0, xx_skew_outer, t7166 = 0, yy_outer, t7168 = 0, t_skew_3_2_inner, t7170 = 0, xx_skew_inner, t7159 = 0, yy_inner, t7172 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + 2t5 <= 128t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:0 test : t_skew_3_2 & xx_skew
-----------
Skewing L0 3 L1 2
Tiling L0 128 L1 64 L2 128
0- for 0 <= t_skew_3_2_outer < 20 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_3_2_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t7201 = 0, t_skew_3_2_outer, t7203 = 0, xx_skew_outer, t7205 = 0, yy_outer, t7207 = 0, t_skew_3_2_inner, t7209 = 0, xx_skew_inner, t7198 = 0, yy_inner, t7211 = 0] : (t5 + t_skew_3_2_inner - 3xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_3_2_inner + 2xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 3t4 + 2t5 <= 128t_skew_3_2_outer <= 3t4 + 2t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_3_2_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 2, 2640) {
    for (c3, max((int32(floor_f32(float32(((c1 + -6)/64)))) + -3), int32(floor_f32(float32(((c1 + 3)/96))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 62)/96)))) + 10)) - max((int32(floor_f32(float32(((c1 + -6)/64)))) + -3), int32(floor_f32(float32(((c1 + 3)/96)))))) + 1)) {
      for (c5, 0, 32) {
        for (c7, max(max(((int32(floor_f32(float32((c1/2)))) - (c3*32)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*32)) + 1)), 0), ((min(min((int32(floor_f32(float32((c1/2)))) - (c3*32)), ((int32(floor_f32(float32(((c1 + -1)/3)))) - (c3*32)) + 341)), 31) - max(max(((int32(floor_f32(float32((c1/2)))) - (c3*32)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*32)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*32), 1)), ((min((c5*32), 1) - max((c5*32), 991)) + 1022)) {
            buf_output[(((c5*32) + c9) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*32) + c9) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*32) + c9) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Tiling L1 32 L2 32
0- for 0 <= t_skew_3_2 < 2640 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 32 | 0
					conv
Evaluation : 693.461975

{ conv[t4, t5, t6] -> conv[0, t7227 = 0, t_skew_3_2 = 3t4 + 2t5, t7229 = 0, xx_skew_outer, t7231 = 0, yy_outer, t7233 = 0, xx_skew_inner, t7224 = 0, yy_inner, t7235 = 0] : (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 2, 2640) {
    for (c3, max((int32(floor_f32(float32(((c1 + -6)/64)))) + -3), int32(floor_f32(float32(((c1 + 3)/96))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 62)/96)))) + 10)) - max((int32(floor_f32(float32(((c1 + -6)/64)))) + -3), int32(floor_f32(float32(((c1 + 3)/96)))))) + 1)) {
      for (c5, 0, 16) {
        for (c7, max(max(((int32(floor_f32(float32((c1/2)))) - (c3*32)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*32)) + 1)), 0), ((min(min((int32(floor_f32(float32((c1/2)))) - (c3*32)), ((int32(floor_f32(float32(((c1 + -1)/3)))) - (c3*32)) + 341)), 31) - max(max(((int32(floor_f32(float32((c1/2)))) - (c3*32)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*32)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*64), 1)), ((min((c5*64), 1) - max((c5*64), 959)) + 1022)) {
            buf_output[(((c5*64) + c9) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*64) + c9) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*64) + c9) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Tiling L1 32 L2 64
0- for 0 <= t_skew_3_2 < 2640 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 64 | 0
					conv
Evaluation : 668.763000

{ conv[t4, t5, t6] -> conv[0, t7287 = 0, t_skew_3_2 = 3t4 + 2t5, t7289 = 0, xx_skew_outer, t7291 = 0, yy_outer, t7293 = 0, xx_skew_inner, t7284 = 0, yy_inner, t7295 = 0] : (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 2, 2640) {
    for (c3, max((int32(floor_f32(float32(((c1 + -6)/64)))) + -3), int32(floor_f32(float32(((c1 + 3)/96))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 62)/96)))) + 10)) - max((int32(floor_f32(float32(((c1 + -6)/64)))) + -3), int32(floor_f32(float32(((c1 + 3)/96)))))) + 1)) {
      for (c5, 0, 8) {
        for (c7, max(max(((int32(floor_f32(float32((c1/2)))) - (c3*32)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*32)) + 1)), 0), ((min(min((int32(floor_f32(float32((c1/2)))) - (c3*32)), ((int32(floor_f32(float32(((c1 + -1)/3)))) - (c3*32)) + 341)), 31) - max(max(((int32(floor_f32(float32((c1/2)))) - (c3*32)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*32)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*128), 1)), ((min((c5*128), 1) - max((c5*128), 895)) + 1022)) {
            buf_output[(((c5*128) + c9) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*128) + c9) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64((((c3*96) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*128) + c9) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*96) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Tiling L1 32 L2 128
0- for 0 <= t_skew_3_2 < 2640 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 128 | 0
					conv
Evaluation : 632.773010

{ conv[t4, t5, t6] -> conv[0, t7350 = 0, t_skew_3_2 = 3t4 + 2t5, t7352 = 0, xx_skew_outer, t7354 = 0, yy_outer, t7356 = 0, xx_skew_inner, t7347 = 0, yy_inner, t7358 = 0] : (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 2, 2640) {
    for (c3, max((int32(floor_f32(float32(((c1 + 58)/128)))) + -2), int32(floor_f32(float32(((c1 + 3)/192))))), ((min(int32(floor_f32(float32((c1/128)))), (int32(floor_f32(float32(((c1 + 62)/192)))) + 5)) - max((int32(floor_f32(float32(((c1 + 58)/128)))) + -2), int32(floor_f32(float32(((c1 + 3)/192)))))) + 1)) {
      for (c5, 0, 32) {
        for (c7, max(max(((int32(floor_f32(float32((c1/2)))) - (c3*64)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*64)) + 1)), 0), ((min(min((int32(floor_f32(float32((c1/2)))) - (c3*64)), ((int32(floor_f32(float32(((c1 + -1)/3)))) - (c3*64)) + 341)), 63) - max(max(((int32(floor_f32(float32((c1/2)))) - (c3*64)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*64)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*32), 1)), ((min((c5*32), 1) - max((c5*32), 991)) + 1022)) {
            buf_output[(((c5*32) + c9) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*32) + c9) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*32) + c9) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Tiling L1 64 L2 32
0- for 0 <= t_skew_3_2 < 2640 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 32 | 0
					conv
Evaluation : 698.531982

{ conv[t4, t5, t6] -> conv[0, t7413 = 0, t_skew_3_2 = 3t4 + 2t5, t7415 = 0, xx_skew_outer, t7417 = 0, yy_outer, t7419 = 0, xx_skew_inner, t7410 = 0, yy_inner, t7421 = 0] : (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 2, 2640) {
    for (c3, max((int32(floor_f32(float32(((c1 + 58)/128)))) + -2), int32(floor_f32(float32(((c1 + 3)/192))))), ((min(int32(floor_f32(float32((c1/128)))), (int32(floor_f32(float32(((c1 + 62)/192)))) + 5)) - max((int32(floor_f32(float32(((c1 + 58)/128)))) + -2), int32(floor_f32(float32(((c1 + 3)/192)))))) + 1)) {
      for (c5, 0, 16) {
        for (c7, max(max(((int32(floor_f32(float32((c1/2)))) - (c3*64)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*64)) + 1)), 0), ((min(min((int32(floor_f32(float32((c1/2)))) - (c3*64)), ((int32(floor_f32(float32(((c1 + -1)/3)))) - (c3*64)) + 341)), 63) - max(max(((int32(floor_f32(float32((c1/2)))) - (c3*64)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*64)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*64), 1)), ((min((c5*64), 1) - max((c5*64), 959)) + 1022)) {
            buf_output[(((c5*64) + c9) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*64) + c9) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*64) + c9) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Tiling L1 64 L2 64
0- for 0 <= t_skew_3_2 < 2640 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 64 | 0
					conv
Evaluation : 667.411011

{ conv[t4, t5, t6] -> conv[0, t7476 = 0, t_skew_3_2 = 3t4 + 2t5, t7478 = 0, xx_skew_outer, t7480 = 0, yy_outer, t7482 = 0, xx_skew_inner, t7473 = 0, yy_inner, t7484 = 0] : (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_3_2 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 2, 2640) {
    for (c3, max((int32(floor_f32(float32(((c1 + 58)/128)))) + -2), int32(floor_f32(float32(((c1 + 3)/192))))), ((min(int32(floor_f32(float32((c1/128)))), (int32(floor_f32(float32(((c1 + 62)/192)))) + 5)) - max((int32(floor_f32(float32(((c1 + 58)/128)))) + -2), int32(floor_f32(float32(((c1 + 3)/192)))))) + 1)) {
      for (c5, 0, 8) {
        for (c7, max(max(((int32(floor_f32(float32((c1/2)))) - (c3*64)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*64)) + 1)), 0), ((min(min((int32(floor_f32(float32((c1/2)))) - (c3*64)), ((int32(floor_f32(float32(((c1 + -1)/3)))) - (c3*64)) + 341)), 63) - max(max(((int32(floor_f32(float32((c1/2)))) - (c3*64)) + -99), ((int32(floor_f32(float32((c1/3)))) - (c3*64)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*128), 1)), ((min((c5*128), 1) - max((c5*128), 895)) + 1022)) {
            buf_output[(((c5*128) + c9) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*128) + c9) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64((((c3*192) - c1) + (c7*3)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*128) + c9) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*192) - c1) + (c7*3)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 3 L1 2
Tiling L1 64 L2 128
0- for 0 <= t_skew_3_2 < 2640 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 128 | 0
					conv
Evaluation : 632.004028

{ conv[t4, t5, t6] -> conv[0, t7539 = 0, t_skew_3_2 = 3t4 + 2t5, t7541 = 0, xx_skew_outer, t7543 = 0, yy_outer, t7545 = 0, xx_skew_inner, t7536 = 0, yy_inner, t7547 = 0] : (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>

original list
586.726990+583.931030+577.590027+576.651001+575.572998+578.776001+693.461975+668.763000+632.773010+698.531982+667.411011+632.004028+629.739990+
remaining list
575.572998+576.651001+577.590027+578.776001+
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    parallel (c3, max((c1 + -199), (int32(floor_f32(float32((c1/2)))) + 1)), ((min(c1, (int32(floor_f32(float32((c1/2)))) + 511)) - max((c1 + -199), (int32(floor_f32(float32((c1/2)))) + 1))) + 1)) {
      for (c5, 1, 1022) {
        buf_output[(c5 + int32((int64(((c3*2) - c1))*(int64)1024)))] = (((((((buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(((c3*2) - c1))*(int64)1024) + (int64)-1024)))] + buf_output[(c5 + int32(((int64(((c3*2) - c1))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(((c3*2) - c1))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32((int64(((c3*2) - c1))*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32((int64(((c3*2) - c1))*(int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)-1)) + int32(((int64(((c3*2) - c1))*(int64)1024) + (int64)1024)))]) + buf_output[(c5 + int32(((int64(((c3*2) - c1))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c5) + (int64)1)) + int32(((int64(((c3*2) - c1))*(int64)1024) + (int64)1024)))])
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew < 145 | 0 | P
		2- for 1 <= yy < 1023 | 0
			conv
Evaluation : 177.171997

{ conv[t4, t5, t6] -> conv[t25 = 0, t26 = 0, t_skew_2_1 = 2t4 + t5, t28 = 0, xx_skew = t4 + t5, t30 = 0, yy = t6, t32 = 0] : 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 }


src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>

original list
177.171997+630.403015+
remaining list
177.171997+630.403015+ Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 45) {
    parallel (c3, max((c1 + -7), int32(floor_f32(float32((c1/2))))), ((min(c1, (int32(floor_f32(float32((c1/2)))) + 16)) - max((c1 + -7), int32(floor_f32(float32((c1/2)))))) + 1)) {
      for (c5, max((1 - min((c1*32), 1)), (((c3*64) - (c1*32)) + -1022)), ((min(min((1420 - max((c1*32), 1389)), (((c3*64) - (c1*32)) + 61)), (((c3 - c1)*32) + 230)) - max((1 - min((c1*32), 1)), (((c3*64) - (c1*32)) + -1022))) + 1)) {
        for (c7, max(max(((((c1 - c3)*32) + c5) + -199), ((((c1*16) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1 - c3)*32) + c5), ((((c1*16) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + 511)), 31) - max(max(((((c1 - c3)*32) + c5) + -199), ((((c1*16) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 32 L1 32
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 4 | 0 | P
		2- for 0 <= t_skew_2_1_inner < 32 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 205.057007

{ conv[t4, t5, t6] -> conv[0, t7615 = 0, t_skew_2_1_outer, t7617 = 0, xx_skew_outer, t7619 = 0, t_skew_2_1_inner, t7612 = 0, xx_skew_inner, t7621 = 0, yy = t6, t7623 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 32 L1 32 L2 32
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 4 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t7692 = 0, t_skew_2_1_outer, t7694 = 0, xx_skew_outer, t7696 = 0, yy_outer, t7698 = 0, t_skew_2_1_inner, t7700 = 0, xx_skew_inner, t7689 = 0, yy_inner, t7702 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 32 L1 32 L2 64
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 4 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t7735 = 0, t_skew_2_1_outer, t7737 = 0, xx_skew_outer, t7739 = 0, yy_outer, t7741 = 0, t_skew_2_1_inner, t7743 = 0, xx_skew_inner, t7732 = 0, yy_inner, t7745 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 32 L1 32 L2 128
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 4 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t7774 = 0, t_skew_2_1_outer, t7776 = 0, xx_skew_outer, t7778 = 0, yy_outer, t7780 = 0, t_skew_2_1_inner, t7782 = 0, xx_skew_inner, t7771 = 0, yy_inner, t7784 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 45) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + 1)/2)))) + -4), int32(floor_f32(float32((c1/4))))), ((min(int32(floor_f32(float32((c1/2)))), (int32(floor_f32(float32((c1/4)))) + 8)) - max((int32(floor_f32(float32(((c1 + 1)/2)))) + -4), int32(floor_f32(float32((c1/4)))))) + 1)) {
      for (c5, max((1 - min((c1*32), 1)), (((c3*128) - (c1*32)) + -1022)), ((min(min((1420 - max((c1*32), 1389)), (((c3*128) - (c1*32)) + 125)), (((c3*64) - (c1*32)) + 262)) - max((1 - min((c1*32), 1)), (((c3*128) - (c1*32)) + -1022))) + 1)) {
        for (c7, max(max(((((c1*32) - (c3*64)) + c5) + -199), ((((c1*16) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1*32) - (c3*64)) + c5), ((((c1*16) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + 511)), 63) - max(max(((((c1*32) - (c3*64)) + c5) + -199), ((((c1*16) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 32 L1 64
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= t_skew_2_1_inner < 32 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 237.425995

{ conv[t4, t5, t6] -> conv[0, t7800 = 0, t_skew_2_1_outer, t7802 = 0, xx_skew_outer, t7804 = 0, t_skew_2_1_inner, t7797 = 0, xx_skew_inner, t7806 = 0, yy = t6, t7808 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 32 L1 64 L2 32
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t7874 = 0, t_skew_2_1_outer, t7876 = 0, xx_skew_outer, t7878 = 0, yy_outer, t7880 = 0, t_skew_2_1_inner, t7882 = 0, xx_skew_inner, t7871 = 0, yy_inner, t7884 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 32 L1 64 L2 64
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t7917 = 0, t_skew_2_1_outer, t7919 = 0, xx_skew_outer, t7921 = 0, yy_outer, t7923 = 0, t_skew_2_1_inner, t7925 = 0, xx_skew_inner, t7914 = 0, yy_inner, t7927 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 32 L1 64 L2 128
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t7956 = 0, t_skew_2_1_outer, t7958 = 0, xx_skew_outer, t7960 = 0, yy_outer, t7962 = 0, t_skew_2_1_inner, t7964 = 0, xx_skew_inner, t7953 = 0, yy_inner, t7966 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 45) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + 1)/4)))) + -2), int32(floor_f32(float32((c1/8))))), ((min(int32(floor_f32(float32((c1/4)))), (int32(floor_f32(float32((c1/8)))) + 4)) - max((int32(floor_f32(float32(((c1 + 1)/4)))) + -2), int32(floor_f32(float32((c1/8)))))) + 1)) {
      for (c5, max((1 - min((c1*32), 1)), (((c3*256) - (c1*32)) + -1022)), ((min(min((1420 - max((c1*32), 1389)), (((c3*256) - (c1*32)) + 253)), (((c3*128) - (c1*32)) + 326)) - max((1 - min((c1*32), 1)), (((c3*256) - (c1*32)) + -1022))) + 1)) {
        for (c7, max(max(((((c1*32) - (c3*128)) + c5) + -199), ((((c1*16) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1*32) - (c3*128)) + c5), ((((c1*16) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 511)), 127) - max(max(((((c1*32) - (c3*128)) + c5) + -199), ((((c1*16) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 32 L1 128
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= t_skew_2_1_inner < 32 | 0
			3- for 0 <= xx_skew_inner < 128 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 387.213989

{ conv[t4, t5, t6] -> conv[0, t7982 = 0, t_skew_2_1_outer, t7984 = 0, xx_skew_outer, t7986 = 0, t_skew_2_1_inner, t7979 = 0, xx_skew_inner, t7988 = 0, yy = t6, t7990 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 32 L1 128 L2 32
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t8056 = 0, t_skew_2_1_outer, t8058 = 0, xx_skew_outer, t8060 = 0, yy_outer, t8062 = 0, t_skew_2_1_inner, t8064 = 0, xx_skew_inner, t8053 = 0, yy_inner, t8066 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 32 L1 128 L2 64
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t8099 = 0, t_skew_2_1_outer, t8101 = 0, xx_skew_outer, t8103 = 0, yy_outer, t8105 = 0, t_skew_2_1_inner, t8107 = 0, xx_skew_inner, t8096 = 0, yy_inner, t8109 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 32 L1 128 L2 128
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t8138 = 0, t_skew_2_1_outer, t8140 = 0, xx_skew_outer, t8142 = 0, yy_outer, t8144 = 0, t_skew_2_1_inner, t8146 = 0, xx_skew_inner, t8135 = 0, yy_inner, t8148 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 23) {
    parallel (c3, max(((c1*2) + -7), c1), ((min(((c1*2) + 1), (c1 + 16)) - max(((c1*2) + -7), c1)) + 1)) {
      for (c5, max(max((1 - min((c1*64), 1)), (((c3 - c1)*64) + -1022)), ((c3*32) - (c1*64))), ((min(min((1420 - max((c1*64), 1357)), (((c3 - c1)*64) + 61)), (((c3*32) - (c1*64)) + 230)) - max(max((1 - min((c1*64), 1)), (((c3 - c1)*64) + -1022)), ((c3*32) - (c1*64)))) + 1)) {
        for (c7, max(max(((((c1*64) - (c3*32)) + c5) + -199), ((((c1 - c3)*32) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1*64) - (c3*32)) + c5), ((((c1 - c3)*32) + int32(floor_f32(float32((c5/2))))) + 511)), 31) - max(max(((((c1*64) - (c3*32)) + c5) + -199), ((((c1 - c3)*32) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 64 L1 32
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 4 | 0 | P
		2- for 0 <= t_skew_2_1_inner < 64 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 190.731003

{ conv[t4, t5, t6] -> conv[0, t8164 = 0, t_skew_2_1_outer, t8166 = 0, xx_skew_outer, t8168 = 0, t_skew_2_1_inner, t8161 = 0, xx_skew_inner, t8170 = 0, yy = t6, t8172 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 64 L1 32 L2 32
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 4 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t8238 = 0, t_skew_2_1_outer, t8240 = 0, xx_skew_outer, t8242 = 0, yy_outer, t8244 = 0, t_skew_2_1_inner, t8246 = 0, xx_skew_inner, t8235 = 0, yy_inner, t8248 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 64 L1 32 L2 64
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 4 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t8281 = 0, t_skew_2_1_outer, t8283 = 0, xx_skew_outer, t8285 = 0, yy_outer, t8287 = 0, t_skew_2_1_inner, t8289 = 0, xx_skew_inner, t8278 = 0, yy_inner, t8291 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 64 L1 32 L2 128
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 4 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t8320 = 0, t_skew_2_1_outer, t8322 = 0, xx_skew_outer, t8324 = 0, yy_outer, t8326 = 0, t_skew_2_1_inner, t8328 = 0, xx_skew_inner, t8317 = 0, yy_inner, t8330 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 23) {
    parallel (c3, max((c1 + -4), int32(floor_f32(float32((c1/2))))), ((min(c1, (int32(floor_f32(float32((c1/2)))) + 8)) - max((c1 + -4), int32(floor_f32(float32((c1/2)))))) + 1)) {
      for (c5, max((1 - min((c1*64), 1)), (((c3*128) - (c1*64)) + -1022)), ((min(min((1420 - max((c1*64), 1357)), (((c3*128) - (c1*64)) + 125)), (((c3 - c1)*64) + 262)) - max((1 - min((c1*64), 1)), (((c3*128) - (c1*64)) + -1022))) + 1)) {
        for (c7, max(max(((((c1 - c3)*64) + c5) + -199), ((((c1*32) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1 - c3)*64) + c5), ((((c1*32) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + 511)), 63) - max(max(((((c1 - c3)*64) + c5) + -199), ((((c1*32) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 64 L1 64
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= t_skew_2_1_inner < 64 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 231.453995

{ conv[t4, t5, t6] -> conv[0, t8346 = 0, t_skew_2_1_outer, t8348 = 0, xx_skew_outer, t8350 = 0, t_skew_2_1_inner, t8343 = 0, xx_skew_inner, t8352 = 0, yy = t6, t8354 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 64 L1 64 L2 32
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t8420 = 0, t_skew_2_1_outer, t8422 = 0, xx_skew_outer, t8424 = 0, yy_outer, t8426 = 0, t_skew_2_1_inner, t8428 = 0, xx_skew_inner, t8417 = 0, yy_inner, t8430 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 64 L1 64 L2 64
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t8463 = 0, t_skew_2_1_outer, t8465 = 0, xx_skew_outer, t8467 = 0, yy_outer, t8469 = 0, t_skew_2_1_inner, t8471 = 0, xx_skew_inner, t8460 = 0, yy_inner, t8473 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 64 L1 64 L2 128
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t8502 = 0, t_skew_2_1_outer, t8504 = 0, xx_skew_outer, t8506 = 0, yy_outer, t8508 = 0, t_skew_2_1_inner, t8510 = 0, xx_skew_inner, t8499 = 0, yy_inner, t8512 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 23) {
    parallel (c3, max((int32(floor_f32(float32((c1/2)))) + -2), int32(floor_f32(float32((c1/4))))), ((min(int32(floor_f32(float32((c1/2)))), (int32(floor_f32(float32((c1/4)))) + 4)) - max((int32(floor_f32(float32((c1/2)))) + -2), int32(floor_f32(float32((c1/4)))))) + 1)) {
      for (c5, max((1 - min((c1*64), 1)), (((c3*256) - (c1*64)) + -1022)), ((min(min((1420 - max((c1*64), 1357)), (((c3*256) - (c1*64)) + 253)), (((c3*128) - (c1*64)) + 326)) - max((1 - min((c1*64), 1)), (((c3*256) - (c1*64)) + -1022))) + 1)) {
        for (c7, max(max(((((c1*64) - (c3*128)) + c5) + -199), ((((c1*32) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1*64) - (c3*128)) + c5), ((((c1*32) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 511)), 127) - max(max(((((c1*64) - (c3*128)) + c5) + -199), ((((c1*32) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 64 L1 128
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= t_skew_2_1_inner < 64 | 0
			3- for 0 <= xx_skew_inner < 128 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 375.427002

{ conv[t4, t5, t6] -> conv[0, t8528 = 0, t_skew_2_1_outer, t8530 = 0, xx_skew_outer, t8532 = 0, t_skew_2_1_inner, t8525 = 0, xx_skew_inner, t8534 = 0, yy = t6, t8536 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 64 L1 128 L2 32
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t8602 = 0, t_skew_2_1_outer, t8604 = 0, xx_skew_outer, t8606 = 0, yy_outer, t8608 = 0, t_skew_2_1_inner, t8610 = 0, xx_skew_inner, t8599 = 0, yy_inner, t8612 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 64 L1 128 L2 64
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t8645 = 0, t_skew_2_1_outer, t8647 = 0, xx_skew_outer, t8649 = 0, yy_outer, t8651 = 0, t_skew_2_1_inner, t8653 = 0, xx_skew_inner, t8642 = 0, yy_inner, t8655 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 64 L1 128 L2 128
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t8684 = 0, t_skew_2_1_outer, t8686 = 0, xx_skew_outer, t8688 = 0, yy_outer, t8690 = 0, t_skew_2_1_inner, t8692 = 0, xx_skew_inner, t8681 = 0, yy_inner, t8694 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 12) {
    parallel (c3, max(((c1*4) + -7), (c1*2)), ((min(min(((c1*4) + 3), ((c1*2) + 17)), 38) - max(((c1*4) + -7), (c1*2))) + 1)) {
      for (c5, max(max((1 - min((c1*128), 1)), (((c3*64) - (c1*128)) + -1022)), ((c3*32) - (c1*128))), ((min(min((1420 - max((c1*128), 1293)), (((c3*64) - (c1*128)) + 61)), (((c3*32) - (c1*128)) + 230)) - max(max((1 - min((c1*128), 1)), (((c3*64) - (c1*128)) + -1022)), ((c3*32) - (c1*128)))) + 1)) {
        for (c7, max(max(((((c1*128) - (c3*32)) + c5) + -199), ((((c1*64) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1*128) - (c3*32)) + c5), ((((c1*64) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + 511)), 31) - max(max(((((c1*128) - (c3*32)) + c5) + -199), ((((c1*64) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 128 L1 32
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 4 | 0 | P
		2- for 0 <= t_skew_2_1_inner < 128 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 163.686996

{ conv[t4, t5, t6] -> conv[0, t8710 = 0, t_skew_2_1_outer, t8712 = 0, xx_skew_outer, t8714 = 0, t_skew_2_1_inner, t8707 = 0, xx_skew_inner, t8716 = 0, yy = t6, t8718 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (2t4 + t5 - t_skew_2_1_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 128 L1 32 L2 32
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 4 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t8784 = 0, t_skew_2_1_outer, t8786 = 0, xx_skew_outer, t8788 = 0, yy_outer, t8790 = 0, t_skew_2_1_inner, t8792 = 0, xx_skew_inner, t8781 = 0, yy_inner, t8794 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (2t4 + t5 - t_skew_2_1_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 128 L1 32 L2 64
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 4 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t8827 = 0, t_skew_2_1_outer, t8829 = 0, xx_skew_outer, t8831 = 0, yy_outer, t8833 = 0, t_skew_2_1_inner, t8835 = 0, xx_skew_inner, t8824 = 0, yy_inner, t8837 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (2t4 + t5 - t_skew_2_1_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 128 L1 32 L2 128
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 4 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t8866 = 0, t_skew_2_1_outer, t8868 = 0, xx_skew_outer, t8870 = 0, yy_outer, t8872 = 0, t_skew_2_1_inner, t8874 = 0, xx_skew_inner, t8863 = 0, yy_inner, t8876 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (2t4 + t5 - t_skew_2_1_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 12) {
    parallel (c3, max(((c1*2) + -4), c1), ((min(((c1*2) + 1), (c1 + 8)) - max(((c1*2) + -4), c1)) + 1)) {
      for (c5, max(max((1 - min((c1*128), 1)), (((c3 - c1)*128) + -1022)), ((c3*64) - (c1*128))), ((min(min((1420 - max((c1*128), 1293)), (((c3 - c1)*128) + 125)), (((c3*64) - (c1*128)) + 262)) - max(max((1 - min((c1*128), 1)), (((c3 - c1)*128) + -1022)), ((c3*64) - (c1*128)))) + 1)) {
        for (c7, max(max(((((c1*128) - (c3*64)) + c5) + -199), ((((c1 - c3)*64) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1*128) - (c3*64)) + c5), ((((c1 - c3)*64) + int32(floor_f32(float32((c5/2))))) + 511)), 63) - max(max(((((c1*128) - (c3*64)) + c5) + -199), ((((c1 - c3)*64) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 128 L1 64
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= t_skew_2_1_inner < 128 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 257.500000

{ conv[t4, t5, t6] -> conv[0, t8892 = 0, t_skew_2_1_outer, t8894 = 0, xx_skew_outer, t8896 = 0, t_skew_2_1_inner, t8889 = 0, xx_skew_inner, t8898 = 0, yy = t6, t8900 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 128 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 128 L1 64 L2 32
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t8966 = 0, t_skew_2_1_outer, t8968 = 0, xx_skew_outer, t8970 = 0, yy_outer, t8972 = 0, t_skew_2_1_inner, t8974 = 0, xx_skew_inner, t8963 = 0, yy_inner, t8976 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 128 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 128 L1 64 L2 64
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t9009 = 0, t_skew_2_1_outer, t9011 = 0, xx_skew_outer, t9013 = 0, yy_outer, t9015 = 0, t_skew_2_1_inner, t9017 = 0, xx_skew_inner, t9006 = 0, yy_inner, t9019 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 128 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 128 L1 64 L2 128
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t9048 = 0, t_skew_2_1_outer, t9050 = 0, xx_skew_outer, t9052 = 0, yy_outer, t9054 = 0, t_skew_2_1_inner, t9056 = 0, xx_skew_inner, t9045 = 0, yy_inner, t9058 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 128 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 12) {
    parallel (c3, max((c1 + -2), int32(floor_f32(float32((c1/2))))), ((min(c1, (int32(floor_f32(float32((c1/2)))) + 4)) - max((c1 + -2), int32(floor_f32(float32((c1/2)))))) + 1)) {
      for (c5, max((1 - min((c1*128), 1)), (((c3*256) - (c1*128)) + -1022)), ((min(min((1420 - max((c1*128), 1293)), (((c3*256) - (c1*128)) + 253)), (((c3 - c1)*128) + 326)) - max((1 - min((c1*128), 1)), (((c3*256) - (c1*128)) + -1022))) + 1)) {
        for (c7, max(max(((((c1 - c3)*128) + c5) + -199), ((((c1*64) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1 - c3)*128) + c5), ((((c1*64) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 511)), 127) - max(max(((((c1 - c3)*128) + c5) + -199), ((((c1*64) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 128 L1 128
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= t_skew_2_1_inner < 128 | 0
			3- for 0 <= xx_skew_inner < 128 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 371.721008

{ conv[t4, t5, t6] -> conv[0, t9074 = 0, t_skew_2_1_outer, t9076 = 0, xx_skew_outer, t9078 = 0, t_skew_2_1_inner, t9071 = 0, xx_skew_inner, t9080 = 0, yy = t6, t9082 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 128 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 128 L1 128 L2 32
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t9148 = 0, t_skew_2_1_outer, t9150 = 0, xx_skew_outer, t9152 = 0, yy_outer, t9154 = 0, t_skew_2_1_inner, t9156 = 0, xx_skew_inner, t9145 = 0, yy_inner, t9158 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 128 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 128 L1 128 L2 64
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t9191 = 0, t_skew_2_1_outer, t9193 = 0, xx_skew_outer, t9195 = 0, yy_outer, t9197 = 0, t_skew_2_1_inner, t9199 = 0, xx_skew_inner, t9188 = 0, yy_inner, t9201 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 128 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L0 128 L1 128 L2 128
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t9230 = 0, t_skew_2_1_outer, t9232 = 0, xx_skew_outer, t9234 = 0, yy_outer, t9236 = 0, t_skew_2_1_inner, t9238 = 0, xx_skew_inner, t9227 = 0, yy_inner, t9240 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 128 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 2)/64))))), ((min(int32(floor_f32(float32((c1/32)))), (int32(floor_f32(float32(((c1 + 62)/64)))) + 15)) - max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 2)/64)))))) + 1)) {
      for (c5, 0, 32) {
        for (c7, max(max(((c1 - (c3*32)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 1)), 0), ((min(min((c1 - (c3*32)), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 511)), 31) - max(max(((c1 - (c3*32)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*32), 1)), ((min((c5*32), 1) - max((c5*32), 991)) + 1022)) {
            buf_output[(((c5*32) + c9) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*32) + c9) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*32) + c9) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L1 32 L2 32
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 4 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 32 | 0
					conv
Evaluation : 337.496002

{ conv[t4, t5, t6] -> conv[0, t9256 = 0, t_skew_2_1 = 2t4 + t5, t9258 = 0, xx_skew_outer, t9260 = 0, yy_outer, t9262 = 0, xx_skew_inner, t9253 = 0, yy_inner, t9264 = 0] : (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 2)/64))))), ((min(int32(floor_f32(float32((c1/32)))), (int32(floor_f32(float32(((c1 + 62)/64)))) + 15)) - max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 2)/64)))))) + 1)) {
      for (c5, 0, 16) {
        for (c7, max(max(((c1 - (c3*32)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 1)), 0), ((min(min((c1 - (c3*32)), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 511)), 31) - max(max(((c1 - (c3*32)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*64), 1)), ((min((c5*64), 1) - max((c5*64), 959)) + 1022)) {
            buf_output[(((c5*64) + c9) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*64) + c9) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*64) + c9) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L1 32 L2 64
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 4 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 64 | 0
					conv
Evaluation : 299.010986

{ conv[t4, t5, t6] -> conv[0, t9317 = 0, t_skew_2_1 = 2t4 + t5, t9319 = 0, xx_skew_outer, t9321 = 0, yy_outer, t9323 = 0, xx_skew_inner, t9314 = 0, yy_inner, t9325 = 0] : (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 2)/64))))), ((min(int32(floor_f32(float32((c1/32)))), (int32(floor_f32(float32(((c1 + 62)/64)))) + 15)) - max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 2)/64)))))) + 1)) {
      for (c5, 0, 8) {
        for (c7, max(max(((c1 - (c3*32)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 1)), 0), ((min(min((c1 - (c3*32)), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 511)), 31) - max(max(((c1 - (c3*32)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*128), 1)), ((min((c5*128), 1) - max((c5*128), 895)) + 1022)) {
            buf_output[(((c5*128) + c9) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*128) + c9) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*128) + c9) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L1 32 L2 128
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 4 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 128 | 0
					conv
Evaluation : 281.644012

{ conv[t4, t5, t6] -> conv[0, t9381 = 0, t_skew_2_1 = 2t4 + t5, t9383 = 0, xx_skew_outer, t9385 = 0, yy_outer, t9387 = 0, xx_skew_inner, t9378 = 0, yy_inner, t9389 = 0] : (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 2)/128))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 126)/128)))) + 7)) - max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 2)/128)))))) + 1)) {
      for (c5, 0, 32) {
        for (c7, max(max(((c1 - (c3*64)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 1)), 0), ((min(min((c1 - (c3*64)), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 511)), 63) - max(max(((c1 - (c3*64)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*32), 1)), ((min((c5*32), 1) - max((c5*32), 991)) + 1022)) {
            buf_output[(((c5*32) + c9) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*32) + c9) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*32) + c9) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L1 64 L2 32
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 32 | 0
					conv
Evaluation : 345.408997

{ conv[t4, t5, t6] -> conv[0, t9445 = 0, t_skew_2_1 = 2t4 + t5, t9447 = 0, xx_skew_outer, t9449 = 0, yy_outer, t9451 = 0, xx_skew_inner, t9442 = 0, yy_inner, t9453 = 0] : (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 2)/128))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 126)/128)))) + 7)) - max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 2)/128)))))) + 1)) {
      for (c5, 0, 16) {
        for (c7, max(max(((c1 - (c3*64)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 1)), 0), ((min(min((c1 - (c3*64)), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 511)), 63) - max(max(((c1 - (c3*64)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*64), 1)), ((min((c5*64), 1) - max((c5*64), 959)) + 1022)) {
            buf_output[(((c5*64) + c9) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*64) + c9) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*64) + c9) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L1 64 L2 64
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 64 | 0
					conv
Evaluation : 362.667999

{ conv[t4, t5, t6] -> conv[0, t9509 = 0, t_skew_2_1 = 2t4 + t5, t9511 = 0, xx_skew_outer, t9513 = 0, yy_outer, t9515 = 0, xx_skew_inner, t9506 = 0, yy_inner, t9517 = 0] : (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 2)/128))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 126)/128)))) + 7)) - max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 2)/128)))))) + 1)) {
      for (c5, 0, 8) {
        for (c7, max(max(((c1 - (c3*64)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 1)), 0), ((min(min((c1 - (c3*64)), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 511)), 63) - max(max(((c1 - (c3*64)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*128), 1)), ((min((c5*128), 1) - max((c5*128), 895)) + 1022)) {
            buf_output[(((c5*128) + c9) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*128) + c9) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*128) + c9) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L1 64 L2 128
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 2 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 128 | 0
					conv
Evaluation : 323.691986

{ conv[t4, t5, t6] -> conv[0, t9573 = 0, t_skew_2_1 = 2t4 + t5, t9575 = 0, xx_skew_outer, t9577 = 0, yy_outer, t9579 = 0, xx_skew_inner, t9570 = 0, yy_inner, t9581 = 0] : (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + 57)/128)))) + -2), int32(floor_f32(float32(((c1 + 2)/256))))), ((min(int32(floor_f32(float32((c1/128)))), (int32(floor_f32(float32(((c1 + 254)/256)))) + 3)) - max((int32(floor_f32(float32(((c1 + 57)/128)))) + -2), int32(floor_f32(float32(((c1 + 2)/256)))))) + 1)) {
      for (c5, 0, 32) {
        for (c7, max(max(((c1 - (c3*128)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 1)), 0), ((min(min((c1 - (c3*128)), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 511)), 127) - max(max(((c1 - (c3*128)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*32), 1)), ((min((c5*32), 1) - max((c5*32), 991)) + 1022)) {
            buf_output[(((c5*32) + c9) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*32) + c9) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*32) + c9) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L1 128 L2 32
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= xx_skew_inner < 128 | 0
				4- for 0 <= yy_inner < 32 | 0
					conv
Evaluation : 550.932983

{ conv[t4, t5, t6] -> conv[0, t9637 = 0, t_skew_2_1 = 2t4 + t5, t9639 = 0, xx_skew_outer, t9641 = 0, yy_outer, t9643 = 0, xx_skew_inner, t9634 = 0, yy_inner, t9645 = 0] : (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + 57)/128)))) + -2), int32(floor_f32(float32(((c1 + 2)/256))))), ((min(int32(floor_f32(float32((c1/128)))), (int32(floor_f32(float32(((c1 + 254)/256)))) + 3)) - max((int32(floor_f32(float32(((c1 + 57)/128)))) + -2), int32(floor_f32(float32(((c1 + 2)/256)))))) + 1)) {
      for (c5, 0, 16) {
        for (c7, max(max(((c1 - (c3*128)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 1)), 0), ((min(min((c1 - (c3*128)), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 511)), 127) - max(max(((c1 - (c3*128)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*64), 1)), ((min((c5*64), 1) - max((c5*64), 959)) + 1022)) {
            buf_output[(((c5*64) + c9) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*64) + c9) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*64) + c9) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L1 128 L2 64
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= xx_skew_inner < 128 | 0
				4- for 0 <= yy_inner < 64 | 0
					conv
Evaluation : 493.471985

{ conv[t4, t5, t6] -> conv[0, t9701 = 0, t_skew_2_1 = 2t4 + t5, t9703 = 0, xx_skew_outer, t9705 = 0, yy_outer, t9707 = 0, xx_skew_inner, t9698 = 0, yy_inner, t9709 = 0] : (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    parallel (c3, max((int32(floor_f32(float32(((c1 + 57)/128)))) + -2), int32(floor_f32(float32(((c1 + 2)/256))))), ((min(int32(floor_f32(float32((c1/128)))), (int32(floor_f32(float32(((c1 + 254)/256)))) + 3)) - max((int32(floor_f32(float32(((c1 + 57)/128)))) + -2), int32(floor_f32(float32(((c1 + 2)/256)))))) + 1)) {
      for (c5, 0, 8) {
        for (c7, max(max(((c1 - (c3*128)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 1)), 0), ((min(min((c1 - (c3*128)), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 511)), 127) - max(max(((c1 - (c3*128)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*128), 1)), ((min((c5*128), 1) - max((c5*128), 895)) + 1022)) {
            buf_output[(((c5*128) + c9) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*128) + c9) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*128) + c9) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Parallelize L1
Tiling L1 128 L2 128
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 1 | 0 | P
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= xx_skew_inner < 128 | 0
				4- for 0 <= yy_inner < 128 | 0
					conv
Evaluation : 523.455994

{ conv[t4, t5, t6] -> conv[0, t9765 = 0, t_skew_2_1 = 2t4 + t5, t9767 = 0, xx_skew_outer, t9769 = 0, yy_outer, t9771 = 0, xx_skew_inner, t9762 = 0, yy_inner, t9773 = 0] : (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>

original list
205.057007+237.425995+387.213989+190.731003+231.453995+375.427002+163.686996+257.500000+371.721008+337.496002+299.010986+281.644012+345.408997+362.667999+323.691986+550.932983+493.471985+523.455994+177.171997+
remaining list
163.686996+177.171997+190.731003+205.057007+ Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 45) {
    for (c3, max((c1 + -7), int32(floor_f32(float32((c1/2))))), ((min(c1, (int32(floor_f32(float32((c1/2)))) + 16)) - max((c1 + -7), int32(floor_f32(float32((c1/2)))))) + 1)) {
      for (c5, max((1 - min((c1*32), 1)), (((c3*64) - (c1*32)) + -1022)), ((min(min((1420 - max((c1*32), 1389)), (((c3*64) - (c1*32)) + 61)), (((c3 - c1)*32) + 230)) - max((1 - min((c1*32), 1)), (((c3*64) - (c1*32)) + -1022))) + 1)) {
        for (c7, max(max(((((c1 - c3)*32) + c5) + -199), ((((c1*16) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1 - c3)*32) + c5), ((((c1*16) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + 511)), 31) - max(max(((((c1 - c3)*32) + c5) + -199), ((((c1*16) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*64) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L0 32 L1 32
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 4 | 0
		2- for 0 <= t_skew_2_1_inner < 32 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 587.161987

{ conv[t4, t5, t6] -> conv[0, t9829 = 0, t_skew_2_1_outer, t9831 = 0, xx_skew_outer, t9833 = 0, t_skew_2_1_inner, t9826 = 0, xx_skew_inner, t9835 = 0, yy = t6, t9837 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 32 L1 32 L2 32
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 4 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t9905 = 0, t_skew_2_1_outer, t9907 = 0, xx_skew_outer, t9909 = 0, yy_outer, t9911 = 0, t_skew_2_1_inner, t9913 = 0, xx_skew_inner, t9902 = 0, yy_inner, t9915 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 32 L1 32 L2 64
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 4 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t9948 = 0, t_skew_2_1_outer, t9950 = 0, xx_skew_outer, t9952 = 0, yy_outer, t9954 = 0, t_skew_2_1_inner, t9956 = 0, xx_skew_inner, t9945 = 0, yy_inner, t9958 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 32 L1 32 L2 128
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 4 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t9987 = 0, t_skew_2_1_outer, t9989 = 0, xx_skew_outer, t9991 = 0, yy_outer, t9993 = 0, t_skew_2_1_inner, t9995 = 0, xx_skew_inner, t9984 = 0, yy_inner, t9997 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 45) {
    for (c3, max((int32(floor_f32(float32(((c1 + 1)/2)))) + -4), int32(floor_f32(float32((c1/4))))), ((min(int32(floor_f32(float32((c1/2)))), (int32(floor_f32(float32((c1/4)))) + 8)) - max((int32(floor_f32(float32(((c1 + 1)/2)))) + -4), int32(floor_f32(float32((c1/4)))))) + 1)) {
      for (c5, max((1 - min((c1*32), 1)), (((c3*128) - (c1*32)) + -1022)), ((min(min((1420 - max((c1*32), 1389)), (((c3*128) - (c1*32)) + 125)), (((c3*64) - (c1*32)) + 262)) - max((1 - min((c1*32), 1)), (((c3*128) - (c1*32)) + -1022))) + 1)) {
        for (c7, max(max(((((c1*32) - (c3*64)) + c5) + -199), ((((c1*16) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1*32) - (c3*64)) + c5), ((((c1*16) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + 511)), 63) - max(max(((((c1*32) - (c3*64)) + c5) + -199), ((((c1*16) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*128) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L0 32 L1 64
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= t_skew_2_1_inner < 32 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 578.348999

{ conv[t4, t5, t6] -> conv[0, t10013 = 0, t_skew_2_1_outer, t10015 = 0, xx_skew_outer, t10017 = 0, t_skew_2_1_inner, t10010 = 0, xx_skew_inner, t10019 = 0, yy = t6, t10021 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 32 L1 64 L2 32
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t10086 = 0, t_skew_2_1_outer, t10088 = 0, xx_skew_outer, t10090 = 0, yy_outer, t10092 = 0, t_skew_2_1_inner, t10094 = 0, xx_skew_inner, t10083 = 0, yy_inner, t10096 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 32 L1 64 L2 64
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t10129 = 0, t_skew_2_1_outer, t10131 = 0, xx_skew_outer, t10133 = 0, yy_outer, t10135 = 0, t_skew_2_1_inner, t10137 = 0, xx_skew_inner, t10126 = 0, yy_inner, t10139 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 32 L1 64 L2 128
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t10168 = 0, t_skew_2_1_outer, t10170 = 0, xx_skew_outer, t10172 = 0, yy_outer, t10174 = 0, t_skew_2_1_inner, t10176 = 0, xx_skew_inner, t10165 = 0, yy_inner, t10178 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 45) {
    for (c3, max((int32(floor_f32(float32(((c1 + 1)/4)))) + -2), int32(floor_f32(float32((c1/8))))), ((min(int32(floor_f32(float32((c1/4)))), (int32(floor_f32(float32((c1/8)))) + 4)) - max((int32(floor_f32(float32(((c1 + 1)/4)))) + -2), int32(floor_f32(float32((c1/8)))))) + 1)) {
      for (c5, max((1 - min((c1*32), 1)), (((c3*256) - (c1*32)) + -1022)), ((min(min((1420 - max((c1*32), 1389)), (((c3*256) - (c1*32)) + 253)), (((c3*128) - (c1*32)) + 326)) - max((1 - min((c1*32), 1)), (((c3*256) - (c1*32)) + -1022))) + 1)) {
        for (c7, max(max(((((c1*32) - (c3*128)) + c5) + -199), ((((c1*16) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1*32) - (c3*128)) + c5), ((((c1*16) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 511)), 127) - max(max(((((c1*32) - (c3*128)) + c5) + -199), ((((c1*16) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*256) - (c1*32)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L0 32 L1 128
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= t_skew_2_1_inner < 32 | 0
			3- for 0 <= xx_skew_inner < 128 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 576.317993

{ conv[t4, t5, t6] -> conv[0, t10194 = 0, t_skew_2_1_outer, t10196 = 0, xx_skew_outer, t10198 = 0, t_skew_2_1_inner, t10191 = 0, xx_skew_inner, t10200 = 0, yy = t6, t10202 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 32 L1 128 L2 32
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t10267 = 0, t_skew_2_1_outer, t10269 = 0, xx_skew_outer, t10271 = 0, yy_outer, t10273 = 0, t_skew_2_1_inner, t10275 = 0, xx_skew_inner, t10264 = 0, yy_inner, t10277 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 32 L1 128 L2 64
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t10310 = 0, t_skew_2_1_outer, t10312 = 0, xx_skew_outer, t10314 = 0, yy_outer, t10316 = 0, t_skew_2_1_inner, t10318 = 0, xx_skew_inner, t10307 = 0, yy_inner, t10320 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 32 L1 128 L2 128
0- for 0 <= t_skew_2_1_outer < 44 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 32 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t10349 = 0, t_skew_2_1_outer, t10351 = 0, xx_skew_outer, t10353 = 0, yy_outer, t10355 = 0, t_skew_2_1_inner, t10357 = 0, xx_skew_inner, t10346 = 0, yy_inner, t10359 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 32 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + 2t4 + t5 <= 32t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 31 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 23) {
    for (c3, max(((c1*2) + -7), c1), ((min(((c1*2) + 1), (c1 + 16)) - max(((c1*2) + -7), c1)) + 1)) {
      for (c5, max(max((1 - min((c1*64), 1)), (((c3 - c1)*64) + -1022)), ((c3*32) - (c1*64))), ((min(min((1420 - max((c1*64), 1357)), (((c3 - c1)*64) + 61)), (((c3*32) - (c1*64)) + 230)) - max(max((1 - min((c1*64), 1)), (((c3 - c1)*64) + -1022)), ((c3*32) - (c1*64)))) + 1)) {
        for (c7, max(max(((((c1*64) - (c3*32)) + c5) + -199), ((((c1 - c3)*32) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1*64) - (c3*32)) + c5), ((((c1 - c3)*32) + int32(floor_f32(float32((c5/2))))) + 511)), 31) - max(max(((((c1*64) - (c3*32)) + c5) + -199), ((((c1 - c3)*32) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3 - c1)*64) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L0 64 L1 32
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 4 | 0
		2- for 0 <= t_skew_2_1_inner < 64 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 579.710022

{ conv[t4, t5, t6] -> conv[0, t10375 = 0, t_skew_2_1_outer, t10377 = 0, xx_skew_outer, t10379 = 0, t_skew_2_1_inner, t10372 = 0, xx_skew_inner, t10381 = 0, yy = t6, t10383 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 64 L1 32 L2 32
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 4 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t10448 = 0, t_skew_2_1_outer, t10450 = 0, xx_skew_outer, t10452 = 0, yy_outer, t10454 = 0, t_skew_2_1_inner, t10456 = 0, xx_skew_inner, t10445 = 0, yy_inner, t10458 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 64 L1 32 L2 64
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 4 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t10491 = 0, t_skew_2_1_outer, t10493 = 0, xx_skew_outer, t10495 = 0, yy_outer, t10497 = 0, t_skew_2_1_inner, t10499 = 0, xx_skew_inner, t10488 = 0, yy_inner, t10501 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 64 L1 32 L2 128
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 4 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t10530 = 0, t_skew_2_1_outer, t10532 = 0, xx_skew_outer, t10534 = 0, yy_outer, t10536 = 0, t_skew_2_1_inner, t10538 = 0, xx_skew_inner, t10527 = 0, yy_inner, t10540 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 23) {
    for (c3, max((c1 + -4), int32(floor_f32(float32((c1/2))))), ((min(c1, (int32(floor_f32(float32((c1/2)))) + 8)) - max((c1 + -4), int32(floor_f32(float32((c1/2)))))) + 1)) {
      for (c5, max((1 - min((c1*64), 1)), (((c3*128) - (c1*64)) + -1022)), ((min(min((1420 - max((c1*64), 1357)), (((c3*128) - (c1*64)) + 125)), (((c3 - c1)*64) + 262)) - max((1 - min((c1*64), 1)), (((c3*128) - (c1*64)) + -1022))) + 1)) {
        for (c7, max(max(((((c1 - c3)*64) + c5) + -199), ((((c1*32) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1 - c3)*64) + c5), ((((c1*32) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + 511)), 63) - max(max(((((c1 - c3)*64) + c5) + -199), ((((c1*32) - (c3*64)) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*128) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L0 64 L1 64
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= t_skew_2_1_inner < 64 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 579.098022

{ conv[t4, t5, t6] -> conv[0, t10556 = 0, t_skew_2_1_outer, t10558 = 0, xx_skew_outer, t10560 = 0, t_skew_2_1_inner, t10553 = 0, xx_skew_inner, t10562 = 0, yy = t6, t10564 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 64 L1 64 L2 32
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t10629 = 0, t_skew_2_1_outer, t10631 = 0, xx_skew_outer, t10633 = 0, yy_outer, t10635 = 0, t_skew_2_1_inner, t10637 = 0, xx_skew_inner, t10626 = 0, yy_inner, t10639 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 64 L1 64 L2 64
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t10672 = 0, t_skew_2_1_outer, t10674 = 0, xx_skew_outer, t10676 = 0, yy_outer, t10678 = 0, t_skew_2_1_inner, t10680 = 0, xx_skew_inner, t10669 = 0, yy_inner, t10682 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 64 L1 64 L2 128
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t10711 = 0, t_skew_2_1_outer, t10713 = 0, xx_skew_outer, t10715 = 0, yy_outer, t10717 = 0, t_skew_2_1_inner, t10719 = 0, xx_skew_inner, t10708 = 0, yy_inner, t10721 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 23) {
    for (c3, max((int32(floor_f32(float32((c1/2)))) + -2), int32(floor_f32(float32((c1/4))))), ((min(int32(floor_f32(float32((c1/2)))), (int32(floor_f32(float32((c1/4)))) + 4)) - max((int32(floor_f32(float32((c1/2)))) + -2), int32(floor_f32(float32((c1/4)))))) + 1)) {
      for (c5, max((1 - min((c1*64), 1)), (((c3*256) - (c1*64)) + -1022)), ((min(min((1420 - max((c1*64), 1357)), (((c3*256) - (c1*64)) + 253)), (((c3*128) - (c1*64)) + 326)) - max((1 - min((c1*64), 1)), (((c3*256) - (c1*64)) + -1022))) + 1)) {
        for (c7, max(max(((((c1*64) - (c3*128)) + c5) + -199), ((((c1*32) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1*64) - (c3*128)) + c5), ((((c1*32) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 511)), 127) - max(max(((((c1*64) - (c3*128)) + c5) + -199), ((((c1*32) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*256) - (c1*64)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L0 64 L1 128
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= t_skew_2_1_inner < 64 | 0
			3- for 0 <= xx_skew_inner < 128 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 579.435974

{ conv[t4, t5, t6] -> conv[0, t10737 = 0, t_skew_2_1_outer, t10739 = 0, xx_skew_outer, t10741 = 0, t_skew_2_1_inner, t10734 = 0, xx_skew_inner, t10743 = 0, yy = t6, t10745 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 64 L1 128 L2 32
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t10810 = 0, t_skew_2_1_outer, t10812 = 0, xx_skew_outer, t10814 = 0, yy_outer, t10816 = 0, t_skew_2_1_inner, t10818 = 0, xx_skew_inner, t10807 = 0, yy_inner, t10820 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 64 L1 128 L2 64
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t10853 = 0, t_skew_2_1_outer, t10855 = 0, xx_skew_outer, t10857 = 0, yy_outer, t10859 = 0, t_skew_2_1_inner, t10861 = 0, xx_skew_inner, t10850 = 0, yy_inner, t10863 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 64 L1 128 L2 128
0- for 0 <= t_skew_2_1_outer < 22 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 64 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t10892 = 0, t_skew_2_1_outer, t10894 = 0, xx_skew_outer, t10896 = 0, yy_outer, t10898 = 0, t_skew_2_1_inner, t10900 = 0, xx_skew_inner, t10889 = 0, yy_inner, t10902 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + 2t4 + t5 <= 64t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 63 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 12) {
    for (c3, max(((c1*4) + -7), (c1*2)), ((min(min(((c1*4) + 3), ((c1*2) + 17)), 38) - max(((c1*4) + -7), (c1*2))) + 1)) {
      for (c5, max(max((1 - min((c1*128), 1)), (((c3*64) - (c1*128)) + -1022)), ((c3*32) - (c1*128))), ((min(min((1420 - max((c1*128), 1293)), (((c3*64) - (c1*128)) + 61)), (((c3*32) - (c1*128)) + 230)) - max(max((1 - min((c1*128), 1)), (((c3*64) - (c1*128)) + -1022)), ((c3*32) - (c1*128)))) + 1)) {
        for (c7, max(max(((((c1*128) - (c3*32)) + c5) + -199), ((((c1*64) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1*128) - (c3*32)) + c5), ((((c1*64) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + 511)), 31) - max(max(((((c1*128) - (c3*32)) + c5) + -199), ((((c1*64) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L0 128 L1 32
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 4 | 0
		2- for 0 <= t_skew_2_1_inner < 128 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 582.239990

{ conv[t4, t5, t6] -> conv[0, t10918 = 0, t_skew_2_1_outer, t10920 = 0, xx_skew_outer, t10922 = 0, t_skew_2_1_inner, t10915 = 0, xx_skew_inner, t10924 = 0, yy = t6, t10926 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (2t4 + t5 - t_skew_2_1_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 128 L1 32 L2 32
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 4 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t10991 = 0, t_skew_2_1_outer, t10993 = 0, xx_skew_outer, t10995 = 0, yy_outer, t10997 = 0, t_skew_2_1_inner, t10999 = 0, xx_skew_inner, t10988 = 0, yy_inner, t11001 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 32 = 0 and (2t4 + t5 - t_skew_2_1_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 128 L1 32 L2 64
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 4 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t11034 = 0, t_skew_2_1_outer, t11036 = 0, xx_skew_outer, t11038 = 0, yy_outer, t11040 = 0, t_skew_2_1_inner, t11042 = 0, xx_skew_inner, t11031 = 0, yy_inner, t11044 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 64 = 0 and (2t4 + t5 - t_skew_2_1_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 128 L1 32 L2 128
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 4 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 32 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t11073 = 0, t_skew_2_1_outer, t11075 = 0, xx_skew_outer, t11077 = 0, yy_outer, t11079 = 0, t_skew_2_1_inner, t11081 = 0, xx_skew_inner, t11070 = 0, yy_inner, t11083 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 64 = 0 and (-t6 + yy_inner) mod 128 = 0 and (2t4 + t5 - t_skew_2_1_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 12) {
    for (c3, max(((c1*2) + -4), c1), ((min(((c1*2) + 1), (c1 + 8)) - max(((c1*2) + -4), c1)) + 1)) {
      for (c5, max(max((1 - min((c1*128), 1)), (((c3 - c1)*128) + -1022)), ((c3*64) - (c1*128))), ((min(min((1420 - max((c1*128), 1293)), (((c3 - c1)*128) + 125)), (((c3*64) - (c1*128)) + 262)) - max(max((1 - min((c1*128), 1)), (((c3 - c1)*128) + -1022)), ((c3*64) - (c1*128)))) + 1)) {
        for (c7, max(max(((((c1*128) - (c3*64)) + c5) + -199), ((((c1 - c3)*64) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1*128) - (c3*64)) + c5), ((((c1 - c3)*64) + int32(floor_f32(float32((c5/2))))) + 511)), 63) - max(max(((((c1*128) - (c3*64)) + c5) + -199), ((((c1 - c3)*64) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3 - c1)*128) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L0 128 L1 64
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= t_skew_2_1_inner < 128 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 577.908997

{ conv[t4, t5, t6] -> conv[0, t11099 = 0, t_skew_2_1_outer, t11101 = 0, xx_skew_outer, t11103 = 0, t_skew_2_1_inner, t11096 = 0, xx_skew_inner, t11105 = 0, yy = t6, t11107 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 128 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 128 L1 64 L2 32
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t11172 = 0, t_skew_2_1_outer, t11174 = 0, xx_skew_outer, t11176 = 0, yy_outer, t11178 = 0, t_skew_2_1_inner, t11180 = 0, xx_skew_inner, t11169 = 0, yy_inner, t11182 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 128 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 128 L1 64 L2 64
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t11215 = 0, t_skew_2_1_outer, t11217 = 0, xx_skew_outer, t11219 = 0, yy_outer, t11221 = 0, t_skew_2_1_inner, t11223 = 0, xx_skew_inner, t11212 = 0, yy_inner, t11225 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 128 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 128 L1 64 L2 128
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 64 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t11254 = 0, t_skew_2_1_outer, t11256 = 0, xx_skew_outer, t11258 = 0, yy_outer, t11260 = 0, t_skew_2_1_inner, t11262 = 0, xx_skew_inner, t11251 = 0, yy_inner, t11264 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 128 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 12) {
    for (c3, max((c1 + -2), int32(floor_f32(float32((c1/2))))), ((min(c1, (int32(floor_f32(float32((c1/2)))) + 4)) - max((c1 + -2), int32(floor_f32(float32((c1/2)))))) + 1)) {
      for (c5, max((1 - min((c1*128), 1)), (((c3*256) - (c1*128)) + -1022)), ((min(min((1420 - max((c1*128), 1293)), (((c3*256) - (c1*128)) + 253)), (((c3 - c1)*128) + 326)) - max((1 - min((c1*128), 1)), (((c3*256) - (c1*128)) + -1022))) + 1)) {
        for (c7, max(max(((((c1 - c3)*128) + c5) + -199), ((((c1*64) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1 - c3)*128) + c5), ((((c1*64) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 511)), 127) - max(max(((((c1 - c3)*128) + c5) + -199), ((((c1*64) - (c3*128)) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*256) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L0 128 L1 128
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= t_skew_2_1_inner < 128 | 0
			3- for 0 <= xx_skew_inner < 128 | 0
				4- for 1 <= yy < 1023 | 0
					conv
Evaluation : 579.708008

{ conv[t4, t5, t6] -> conv[0, t11280 = 0, t_skew_2_1_outer, t11282 = 0, xx_skew_outer, t11284 = 0, t_skew_2_1_inner, t11277 = 0, xx_skew_inner, t11286 = 0, yy = t6, t11288 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 128 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 128 L1 128 L2 32
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 32 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t11353 = 0, t_skew_2_1_outer, t11355 = 0, xx_skew_outer, t11357 = 0, yy_outer, t11359 = 0, t_skew_2_1_inner, t11361 = 0, xx_skew_inner, t11350 = 0, yy_inner, t11363 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 128 = 0 and (-t6 + yy_inner) mod 32 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 31 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 128 L1 128 L2 64
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 64 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t11396 = 0, t_skew_2_1_outer, t11398 = 0, xx_skew_outer, t11400 = 0, yy_outer, t11402 = 0, t_skew_2_1_inner, t11404 = 0, xx_skew_inner, t11393 = 0, yy_inner, t11406 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 128 = 0 and (-t6 + yy_inner) mod 64 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 63 }
<illegal>
Tiling3 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:0 test : t_skew_2_1 & xx_skew
-----------
Skewing L0 2 L1 1
Tiling L0 128 L1 128 L2 128
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= t_skew_2_1_inner < 128 | 0
				4- for 0 <= xx_skew_inner < 128 | 0
					5- for 0 <= yy_inner < 128 | 0
						conv
{ conv[t4, t5, t6] -> conv[0, t11435 = 0, t_skew_2_1_outer, t11437 = 0, xx_skew_outer, t11439 = 0, yy_outer, t11441 = 0, t_skew_2_1_inner, t11443 = 0, xx_skew_inner, t11432 = 0, yy_inner, t11445 = 0] : (t5 + t_skew_2_1_inner - 2xx_skew_inner) mod 128 = 0 and (-t6 + yy_inner) mod 128 = 0 and (t4 - t_skew_2_1_inner + xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + 2t4 + t5 <= 128t_skew_2_1_outer <= 2t4 + t5 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= t_skew_2_1_inner <= 127 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 127 }
<illegal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    for (c3, max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 2)/64))))), ((min(int32(floor_f32(float32((c1/32)))), (int32(floor_f32(float32(((c1 + 62)/64)))) + 15)) - max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 2)/64)))))) + 1)) {
      for (c5, 0, 32) {
        for (c7, max(max(((c1 - (c3*32)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 1)), 0), ((min(min((c1 - (c3*32)), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 511)), 31) - max(max(((c1 - (c3*32)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*32), 1)), ((min((c5*32), 1) - max((c5*32), 991)) + 1022)) {
            buf_output[(((c5*32) + c9) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*32) + c9) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*32) + c9) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L1 32 L2 32
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 4 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 32 | 0
					conv
Evaluation : 634.096985

{ conv[t4, t5, t6] -> conv[0, t11461 = 0, t_skew_2_1 = 2t4 + t5, t11463 = 0, xx_skew_outer, t11465 = 0, yy_outer, t11467 = 0, xx_skew_inner, t11458 = 0, yy_inner, t11469 = 0] : (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    for (c3, max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 2)/64))))), ((min(int32(floor_f32(float32((c1/32)))), (int32(floor_f32(float32(((c1 + 62)/64)))) + 15)) - max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 2)/64)))))) + 1)) {
      for (c5, 0, 16) {
        for (c7, max(max(((c1 - (c3*32)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 1)), 0), ((min(min((c1 - (c3*32)), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 511)), 31) - max(max(((c1 - (c3*32)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*64), 1)), ((min((c5*64), 1) - max((c5*64), 959)) + 1022)) {
            buf_output[(((c5*64) + c9) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*64) + c9) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*64) + c9) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L1 32 L2 64
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 4 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 64 | 0
					conv
Evaluation : 633.302002

{ conv[t4, t5, t6] -> conv[0, t11521 = 0, t_skew_2_1 = 2t4 + t5, t11523 = 0, xx_skew_outer, t11525 = 0, yy_outer, t11527 = 0, xx_skew_inner, t11518 = 0, yy_inner, t11529 = 0] : (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    for (c3, max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 2)/64))))), ((min(int32(floor_f32(float32((c1/32)))), (int32(floor_f32(float32(((c1 + 62)/64)))) + 15)) - max((int32(floor_f32(float32(((c1 + -7)/32)))) + -6), int32(floor_f32(float32(((c1 + 2)/64)))))) + 1)) {
      for (c5, 0, 8) {
        for (c7, max(max(((c1 - (c3*32)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 1)), 0), ((min(min((c1 - (c3*32)), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 511)), 31) - max(max(((c1 - (c3*32)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*32)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*128), 1)), ((min((c5*128), 1) - max((c5*128), 895)) + 1022)) {
            buf_output[(((c5*128) + c9) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*128) + c9) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64((((c3*64) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*128) + c9) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*64) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L1 32 L2 128
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 4 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 0 <= yy_inner < 128 | 0
					conv
Evaluation : 620.101990

{ conv[t4, t5, t6] -> conv[0, t11584 = 0, t_skew_2_1 = 2t4 + t5, t11586 = 0, xx_skew_outer, t11588 = 0, yy_outer, t11590 = 0, xx_skew_inner, t11581 = 0, yy_inner, t11592 = 0] : (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 32 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -31 + t4 + t5 <= 32xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= xx_skew_inner <= 31 and 0 <= yy_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    for (c3, max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 2)/128))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 126)/128)))) + 7)) - max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 2)/128)))))) + 1)) {
      for (c5, 0, 32) {
        for (c7, max(max(((c1 - (c3*64)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 1)), 0), ((min(min((c1 - (c3*64)), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 511)), 63) - max(max(((c1 - (c3*64)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*32), 1)), ((min((c5*32), 1) - max((c5*32), 991)) + 1022)) {
            buf_output[(((c5*32) + c9) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*32) + c9) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*32) + c9) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L1 64 L2 32
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 32 | 0
					conv
Evaluation : 676.148987

{ conv[t4, t5, t6] -> conv[0, t11647 = 0, t_skew_2_1 = 2t4 + t5, t11649 = 0, xx_skew_outer, t11651 = 0, yy_outer, t11653 = 0, xx_skew_inner, t11644 = 0, yy_inner, t11655 = 0] : (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    for (c3, max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 2)/128))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 126)/128)))) + 7)) - max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 2)/128)))))) + 1)) {
      for (c5, 0, 16) {
        for (c7, max(max(((c1 - (c3*64)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 1)), 0), ((min(min((c1 - (c3*64)), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 511)), 63) - max(max(((c1 - (c3*64)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*64), 1)), ((min((c5*64), 1) - max((c5*64), 959)) + 1022)) {
            buf_output[(((c5*64) + c9) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*64) + c9) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*64) + c9) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L1 64 L2 64
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 64 | 0
					conv
Evaluation : 662.052979

{ conv[t4, t5, t6] -> conv[0, t11710 = 0, t_skew_2_1 = 2t4 + t5, t11712 = 0, xx_skew_outer, t11714 = 0, yy_outer, t11716 = 0, xx_skew_inner, t11707 = 0, yy_inner, t11718 = 0] : (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    for (c3, max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 2)/128))))), ((min(int32(floor_f32(float32((c1/64)))), (int32(floor_f32(float32(((c1 + 126)/128)))) + 7)) - max((int32(floor_f32(float32(((c1 + -7)/64)))) + -3), int32(floor_f32(float32(((c1 + 2)/128)))))) + 1)) {
      for (c5, 0, 8) {
        for (c7, max(max(((c1 - (c3*64)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 1)), 0), ((min(min((c1 - (c3*64)), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 511)), 63) - max(max(((c1 - (c3*64)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*64)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*128), 1)), ((min((c5*128), 1) - max((c5*128), 895)) + 1022)) {
            buf_output[(((c5*128) + c9) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*128) + c9) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64((((c3*128) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*128) + c9) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*128) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L1 64 L2 128
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 2 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= xx_skew_inner < 64 | 0
				4- for 0 <= yy_inner < 128 | 0
					conv
Evaluation : 634.067017

{ conv[t4, t5, t6] -> conv[0, t11773 = 0, t_skew_2_1 = 2t4 + t5, t11775 = 0, xx_skew_outer, t11777 = 0, yy_outer, t11779 = 0, xx_skew_inner, t11770 = 0, yy_inner, t11781 = 0] : (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 64 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -63 + t4 + t5 <= 64xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= xx_skew_inner <= 63 and 0 <= yy_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    for (c3, max((int32(floor_f32(float32(((c1 + 57)/128)))) + -2), int32(floor_f32(float32(((c1 + 2)/256))))), ((min(int32(floor_f32(float32((c1/128)))), (int32(floor_f32(float32(((c1 + 254)/256)))) + 3)) - max((int32(floor_f32(float32(((c1 + 57)/128)))) + -2), int32(floor_f32(float32(((c1 + 2)/256)))))) + 1)) {
      for (c5, 0, 32) {
        for (c7, max(max(((c1 - (c3*128)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 1)), 0), ((min(min((c1 - (c3*128)), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 511)), 127) - max(max(((c1 - (c3*128)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*32), 1)), ((min((c5*32), 1) - max((c5*32), 991)) + 1022)) {
            buf_output[(((c5*32) + c9) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*32) + c9) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)-1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*32) + c9) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*32) + c9)) + (int64)1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L1 128 L2 32
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 31 | 0
			3- for 0 <= xx_skew_inner < 128 | 0
				4- for 0 <= yy_inner < 32 | 0
					conv
Evaluation : 683.653015

{ conv[t4, t5, t6] -> conv[0, t11836 = 0, t_skew_2_1 = 2t4 + t5, t11838 = 0, xx_skew_outer, t11840 = 0, yy_outer, t11842 = 0, xx_skew_inner, t11833 = 0, yy_inner, t11844 = 0] : (-t6 + yy_inner) mod 32 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -31 + t6 <= 32yy_outer <= t6 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 31 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    for (c3, max((int32(floor_f32(float32(((c1 + 57)/128)))) + -2), int32(floor_f32(float32(((c1 + 2)/256))))), ((min(int32(floor_f32(float32((c1/128)))), (int32(floor_f32(float32(((c1 + 254)/256)))) + 3)) - max((int32(floor_f32(float32(((c1 + 57)/128)))) + -2), int32(floor_f32(float32(((c1 + 2)/256)))))) + 1)) {
      for (c5, 0, 16) {
        for (c7, max(max(((c1 - (c3*128)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 1)), 0), ((min(min((c1 - (c3*128)), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 511)), 127) - max(max(((c1 - (c3*128)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*64), 1)), ((min((c5*64), 1) - max((c5*64), 959)) + 1022)) {
            buf_output[(((c5*64) + c9) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*64) + c9) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)-1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*64) + c9) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*64) + c9)) + (int64)1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L1 128 L2 64
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 15 | 0
			3- for 0 <= xx_skew_inner < 128 | 0
				4- for 0 <= yy_inner < 64 | 0
					conv
Evaluation : 660.010010

{ conv[t4, t5, t6] -> conv[0, t11899 = 0, t_skew_2_1 = 2t4 + t5, t11901 = 0, xx_skew_outer, t11903 = 0, yy_outer, t11905 = 0, xx_skew_inner, t11896 = 0, yy_inner, t11907 = 0] : (-t6 + yy_inner) mod 64 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -63 + t6 <= 64yy_outer <= t6 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 63 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>
 Tiling 2 loop names: t_skew_2_1 xx_skew yy  deapth of outer is:1 test : xx_skew & yy
Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 1, 1420) {
    for (c3, max((int32(floor_f32(float32(((c1 + 57)/128)))) + -2), int32(floor_f32(float32(((c1 + 2)/256))))), ((min(int32(floor_f32(float32((c1/128)))), (int32(floor_f32(float32(((c1 + 254)/256)))) + 3)) - max((int32(floor_f32(float32(((c1 + 57)/128)))) + -2), int32(floor_f32(float32(((c1 + 2)/256)))))) + 1)) {
      for (c5, 0, 8) {
        for (c7, max(max(((c1 - (c3*128)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 1)), 0), ((min(min((c1 - (c3*128)), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 511)), 127) - max(max(((c1 - (c3*128)) + -199), ((int32(floor_f32(float32((c1/2)))) - (c3*128)) + 1)), 0)) + 1)) {
          for (c9, (1 - min((c5*128), 1)), ((min((c5*128), 1) - max((c5*128), 895)) + 1022)) {
            buf_output[(((c5*128) + c9) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(((c5*128) + c9) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32((int64((((c3*256) - c1) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)-1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(((c5*128) + c9) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(((c5*128) + c9)) + (int64)1)) + int32(((int64((((c3*256) - c1) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}

-----------
Skewing L0 2 L1 1
Tiling L1 128 L2 128
0- for 0 <= t_skew_2_1 < 1420 | 0
	1- for 0 <= xx_skew_outer < 1 | 0
		2- for 0 <= yy_outer < 7 | 0
			3- for 0 <= xx_skew_inner < 128 | 0
				4- for 0 <= yy_inner < 128 | 0
					conv
Evaluation : 629.504028

{ conv[t4, t5, t6] -> conv[0, t11962 = 0, t_skew_2_1 = 2t4 + t5, t11964 = 0, xx_skew_outer, t11966 = 0, yy_outer, t11968 = 0, xx_skew_inner, t11959 = 0, yy_inner, t11970 = 0] : (-t6 + yy_inner) mod 128 = 0 and (t4 + t5 - xx_skew_inner) mod 128 = 0 and 0 <= t4 <= 199 and 0 < t5 <= 1022 and 0 < t6 <= 1022 and -127 + t4 + t5 <= 128xx_skew_outer <= t4 + t5 and -127 + t6 <= 128yy_outer <= t6 and 0 <= xx_skew_inner <= 127 and 0 <= yy_inner <= 127 }




src:0 1 0 -1 ,0 0 1 -1 ,
src:0 1 0 -1 ,0 0 1 0 ,
src:0 1 0 -1 ,0 0 1 1 ,
src:0 1 0 0 ,0 0 1 -1 ,
src:0 1 0 0 ,0 0 1 1 ,
src:0 1 0 1 ,0 0 1 -1 ,
src:0 1 0 1 ,0 0 1 0 ,
src:0 1 0 1 ,0 0 1 1 ,

<legal>

original list
587.161987+578.348999+576.317993+579.710022+579.098022+579.435974+582.239990+577.908997+579.708008+634.096985+633.302002+620.101990+676.148987+662.052979+634.067017+683.653015+660.010010+629.504028+630.403015+
remaining list
576.317993+577.908997+578.348999+579.098022+NB explored schedules : 268
Best evaluation : 163.686996
Initial exec time : 595.890015
Initial evaluation : 602.669006
Search time : 289321 ms 
0- for 0 <= t_skew_2_1_outer < 11 | 0
	1- for 0 <= xx_skew_outer < 4 | 0 | P
		2- for 0 <= t_skew_2_1_inner < 128 | 0
			3- for 0 <= xx_skew_inner < 32 | 0
				4- for 1 <= yy < 1023 | 0
					conv

Generated Halide IR:
assert((reinterpret(uint64, buf_output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("buf_output"))
let buf_output = _halide_buffer_get_host(buf_output.buffer)
produce  {
  allocate _src_b0[int32 * 1024 * 1024]
  allocate _conv_b1[int32 * 1022 * 1022 * 200]
  for (c1, 0, 12) {
    parallel (c3, max(((c1*4) + -7), (c1*2)), ((min(min(((c1*4) + 3), ((c1*2) + 17)), 38) - max(((c1*4) + -7), (c1*2))) + 1)) {
      for (c5, max(max((1 - min((c1*128), 1)), (((c3*64) - (c1*128)) + -1022)), ((c3*32) - (c1*128))), ((min(min((1420 - max((c1*128), 1293)), (((c3*64) - (c1*128)) + 61)), (((c3*32) - (c1*128)) + 230)) - max(max((1 - min((c1*128), 1)), (((c3*64) - (c1*128)) + -1022)), ((c3*32) - (c1*128)))) + 1)) {
        for (c7, max(max(((((c1*128) - (c3*32)) + c5) + -199), ((((c1*64) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + 1)), 0), ((min(min((((c1*128) - (c3*32)) + c5), ((((c1*64) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + 511)), 31) - max(max(((((c1*128) - (c3*32)) + c5) + -199), ((((c1*64) - (c3*32)) + int32(floor_f32(float32((c5/2))))) + 1)), 0)) + 1)) {
          for (c9, 1, 1022) {
            buf_output[(c9 + int32((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024)))] = (((((((buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))] + buf_output[(c9 + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)-1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)-1)) + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(c9 + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))]) + buf_output[(int32((int64(c9) + (int64)1)) + int32(((int64(((((c3*64) - (c1*128)) - c5) + (c7*2)))*(int64)1024) + (int64)1024)))])
          }
        }
      }
    }
  }
}
Best schedule exec time : 163.207993
Speedup : 3.651108
